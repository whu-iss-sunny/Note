20180903
    1.sql server 执行计划
        
    2.系统架构师考试 论文
      a.设计模式 
      b.软件架构 混合架构
20180904
    1.sql server 统计信息
      全废话SQL Server统计信息 https://blog.csdn.net/dba_huangzj/article/details/52835958
      
20180905
    1.左倾错误的“左”要加引号，而“右”不加是因为什么
        左倾错误的“左”要加引号，而“右”不加是为了区分在无产阶级革命史上，人们习惯于把参加革命队伍的人，按他们革命态度坚定与否分为左、中、右三派：
        左（不加引号的）指的是革命最坚决最激进者，
        右是指对革命不坚定容易动摇者，
        中则介于二者之间。
        可见，不带引号的左是用来表示革命意志坚定，革命方向正确的人
        但实际上在革命队伍中，还有一种人，他们貌似革命意志非常坚定，行为非常激进，其实是十分冒险、超越客观可能因而会给革命带来严重损失的。
        这种左不是真正的左，为了区别起见，就给它加上引号。但右派、右倾就没发现有这种情况，所以也就用不着用引号加以区别了
        左倾是指政治上追求进步、同情劳动人民的倾向。
        而带引号的“左”倾，则是政治思想上超越客观，脱离社会现实条件，陷入空想、盲动和冒险的倾向。
        所以，为了表示贬义，特在左字上添加了引号，即“左”倾，以区别于真正的左倾。“左”倾思想表现为急于求成，主观地夸大革命力量，轻视敌人力量和客观困难，在革命和建设中采取盲动的冒险的行动；
        或者在革命组织内部混淆两类不同性质的矛盾，采取残酷斗争、无情打击的政策；
        或者在同盟军问题上实行关门主义，打倒一切
        右倾是指政治思想上，认识落后于实际，不能随变化了的客观情况变化、前进，甚至违背客观发展规律的倾向。
        右倾思想如果形成为系统完整的路线，并在实践中贯彻便成为右倾机会主义。
        右倾机会主义在政治斗争中往往放弃原则，牺牲无产阶级根本利益而求得妥协，又叫右倾投降主义
           
        政治倾向：左和右都没有好坏之分的，左是激进，右是保守。好坏要具体情况具体分析……
        马克思要靠暴力革命就是激进的，伟大的恩格斯就不赞同…… 如果比马克思还激进，就要加引号表示区分。
        
        政治领域，右的意思是保守（主观落后于客观），而左代表进步（主观在客观之前）。所以左是褒义。
        讲到“左”，指的是那种过于左的左，过于激进，不是真正的左，不是褒义的那种左，所以加上引号加以区分
        
    2.左和右
        从国际上看,左与右的区别一般定义为左要求变革,比较激进,右一般不赞成变革,比较保守.最早区分左和右记得是在欧洲的历史上,
        主张激进改革的议员坐左边,主张维持现状保守的议员坐右边这样开始区分左与右的历史
        
    3.一篇文章教你分清左和右，极“左”和极右 https://www.sohu.com/a/239677129_425345
        像当年俄国社会民主工党的多数派，即布尔什维克，即为左派
        而另一部分少数派，既孟什维克，即为右派。
        
    4.关于布尔什维克
        “布尔什维克”是俄文“多数派”（Большевики?）的音译，是列宁创建的俄国无产阶级政党。
        与之相对的是“孟什维克”，俄语意指“少数派”。
        在1903年俄国社会民主工党第二次代表大会上，一个新型的无产阶级政党――布尔什维克党宣告诞生。
        布尔什维克党的建立是俄国工人运动史上的重大转折点，推动了俄国革命运动的发展，它不但对俄国革命历史的进程而且对后来的整个国际共运产生了深远的影响
        苏维埃俄国建立后在1918年改名为共产党，因此俄国共产党也叫布尔什维克党即俄共（布）
        是苏共第28次代表大会后解体的

20180911
    1.最近再破解 ok v2接口
      a.重要字段 Request headers -> User-Agent Referer(只在特定的值下才返回 特定数据 比如登录认证等)
        在C#中HttpWebRequest有的字段可以直接设置(本身就有这些属性) 有的需要添加到Headers成员(WebHeaderCollection 有add和set方法)
      b.QryString 直接在url中提交
      c.Post form data 直接在url中提交或者Encoding编码提交(取决与服务器)
      d.Post payload 必须encoding编码提交
20180912
    1. 如何在不同编程语言中获取现在的Unix时间戳 C#
        public static string GetTimestampByMillSec() 毫秒
        {
            return ((DateTime.Now.ToUniversalTime().Ticks - 621355968000000000) / 10000).ToString();
        }

        public static string GetTimestampBySec() 秒
        {
            return ((DateTime.Now.ToUniversalTime().Ticks - 621355968000000000) / 10000000).ToString();
        }
20180914
    1.SQL Server统计信息 (头信息 密度信息 直方图)(基数预估 开销预估)
        a.你传给SQL Server的查询首先会传递到SQL Server查询优化器（Query Optimizer）中，如果SQL Server没有缓存执行计划，那么它就会针对这个查询生成一个查询计划。
          在生成的过程中，SQL Server优化器会 选择与逻辑操作符（如join等）对应的合适的物理操作符在物理层面上进行执行（
          注：SQL，结构化查询语言，是为了让用户告知数据库需要什么数据或操作，而不是告诉数据库如何去获取数据和操作，所以SQL语言传输到DBMS后需要转换成计算机能识别的操作，这些操作在高层次上看来就是一系列的物理操作符）。
          在选择物理操作符的时候，一个逻辑操作符可能可以使用多个物理操作符来实现，比如对于逻辑操作符中的WHERE XXX=XXXX，在物理操作符中可能使用索引查找（Index seek）或表扫描（Table Scan）来实现.
          又比如对于SQL语句中的各种JOIN，可选的物理操作符有Hash、Merge和Nested Loop Joins
        b.有很多因素会影响优化器对物理操作符的选择，其中最重要的一个就是基数预估（cardinality estimations），这个过程会计算在应用了过滤操作之后，可能剩下的符合条件的行数
        c.说到统计信息，就一定要提到查询优化器，主流关系型数据库管理系统的查询优化器都是基于开销的优化（cost-based optimizer, CBO）,而优化器是生成执行计划的组件
          所以，执行计划的质量直接依赖于开销预估的准确性，同样，执行计划的预估开销又基于算法/操作符的使用和基数预估。
          所以，为了让优化器得到准确的预估开销，优化器需要尽可能准确地预估制定查询要返回的记录数
    2.正则表达式匹配四则运算 .net
        Regex regex = new Regex(@"
        ^                       (?#匹配开头)
        [-+]?                   (?#开头可以出现正负号)
        ([0-9]+($|[-+*/]))*     (?#可选数-符号-数-符号-……-数-符号或结尾)
        (
            (
                (?<o>\()        (?#左括号，保存到o名字下)
                [-+]?           (?#可选正负号)
                ([0-9]+[-+*/])* (?#可选数-符-数-符……)
            )+                  (?#可以重复出现左括号)
            [0-9]+              (?#左右括号之间最起码需要一个操作数)
            (                   (?#)
                (?<-o>\))       (?#右括号，匹配的同时去掉一个左括号)
                ([-+*/][0-9]+)* (?#可选符-数-符-数……)
            )+                  (?#可以重复出现右括号，仅当还有左括号剩余)
            ($|[-+*/])          (?#要么结尾，要么在下一个左括号出现之前出现一个运算符)
        )*                      (?#重复出现左括号)
        (?(o)(?!))              (?#如果还有左括号剩余就不匹配任何东西)
        $                       (?#匹配结尾)
        ", RegexOptions.IgnorePatternWhitespace);
                    string[] tests = new string[] {
                        "1",
                        "1+23",
                        "1+23*456",
                        "1*(23+456)",
                        "(3)",
                        "((67+8)*9+10)/11",
                        "12+(13*)",
                        "(()",
                        "((3)",
                        "(3))",
                        "+3",
                        "5*(4+3/(-2))",
                        "(5*(4+3/(-2))",
                        "5*(4+3/(-2)))",
                    };
                    foreach (string s in tests)
                        Console.WriteLine("{0}: {1}", regex.IsMatch(s) ? "Good" : " Bad", s);
                    Console.ReadKey();
                    //结果：
                    //Good: 1
                    //Good: 1+23
                    //Good: 1+23*456
                    //Good: 1*(23+456)
                    //Good: (3)
                    //Good: ((67+8)*9+10)/11
                    // Bad: 12+(13*)
                    // Bad: (()
                    // Bad: ((3)
                    // Bad: (3))
                    //Good: +3
                    //Good: 5*(4+3/(-2))
                    // Bad: (5*(4+3/(-2))
                    // Bad: 5*(4+3/(-2)))
        ps.平衡组定义匹配 Balanced group definition 
            https://blogs.msdn.microsoft.com/bclteam/2005/03/15/net-regular-expressions-regex-and-balanced-matching-ryan-byington/
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/grouping-constructs-in-regular-expressions#balancing_group_definition
           用正则表达式来做四则运算 确实有点复杂了 => 逆波兰
20180918
    1.表与视图
        区别：
            a视图是已经编译好的sql语句；而表不是。
            b视图没有实际的物理记录；而表有。
            c视图是窗口；表是内容
            d标是用物理空间而视图不占用物理空间，视图只是逻辑概念的存在；表可以修改，但视图只能有创建的语句来修改。
            e表是内模式，视图是外模式。
            f视图是查看数据表的一种方法，可以查询数据表中某些字段构成的数据，只是一些sql语句的集合。从安全的角度来说，视图可以不给用户接触数据表，从而不知道表结构。
            g表属于全局模式中的表，是实表；视图属于局部模式的表，是虚表。
            h视图的建立和删除只影响视图本身，不影响对应的基本表。
        联系：视图实在基本表之上建立的表，它的结构（即所有定义列）和内容（即所有数据行）都来自基本表，它依据基本表存在而存在。
              一个视图可以对应一个基本表，也可以对应多个基本表。视图是基本表的抽象和在逻辑意义上建立的新关系。
    2.正则表达式 
        . 匹配除换行符以外的任意字符 
        \w 匹配字母或数字或下划线或汉字 
        \s 匹配任意的空白符 
        \d 匹配数字 
        \b 匹配单词的开始或结束 
        ^ 匹配字符串的开始 
        $ 匹配字符串的结束 
    
        * 重复零次或更多次 
        + 重复一次或更多次 
        ? 重复零次或一次 
        {n} 重复n次 
        {n,} 重复n次或更多次 
        {n,m} 重复n到m次 
        
        字符类
            要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？
            很简单，你只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。
20180919
    1.Url编码解码 
        using System.Web;//System.Web.dll
        HttpUtility.UrlDecode
        HttpUtility.UrlEncode
    2.js正则表达式匹配 全局模式 g
      如果你不带g,在正则过程中，字符串是从左至右匹配的，如果匹配成功就不再继续向右匹配了，如果你带g,它会重头到尾的把正确匹配的字符串挑选出来
      var str = 'aaaaaaaa'
      var reg1 = /a/ 
      var reg2 = /a/g 
      str.match(reg1)  // 结果为：["a", index: 0, input: "aaaaaaaa"] 
      str.match(reg2)  // 结果为：["a", "a", "a", "a", "a", "a", "a", "a"] 
    3.正则表达式 http://imweb.io/topic/56e804ef1a5f05dc50643106
        匹配html标签
            匹配HTML标签嘛，感觉很简单的样子，我们的第一反应可能是：var pattern = /<[^>]+>/ 不过这样匹配可能存在的问题是：如果tag中含有>，上面的正则就不能正常匹配了。如： <input name=123 value=">" >
            虽然上面这种HTML的写法很少(sha)见(bi)，但确实合法的。因此，简单的<[^>]+>就不能用了，需要想个聪明点的办法。 我们先来看一下HTML Tag中有什么规则：<...>中能够出现
            引用文本（被单引号或双引号包裹的）
            非引用形式的“其他文本”（包括除了>和引号之外的任何字符）

            引用文本：HTML中的引文可以用双引号，也可以用单引号，但不允许嵌套转义的引号。
            因此我们可以使用/("[^"]*"|'[^']*')/来匹配。

            其他文本：除了>和引号之外的任意字符
            可以使用/[^'">]/来匹配 现在可以得出匹配HTML Tag的正则表达式最终版！

            var pattern = /<("[^"]*"|'[^']*'|[^'">])*>/
            给这个正则表达式来点注释：

            <                # 开始的尖括号"<"
                (            #     任意数量的...
                    "[^"]*"  #         双引号字符串
                    |        #         或者是...
                    '[^']*'  #         单引号字符串
                    |        #         或者是...
                    [^'">]   #         "其他文本"
                )*           #         
            >                # 结束的尖括号">"
            需要注意的是，我们不用"+"来修饰[^'">]的原因是([^'">]+)*可能会带来灾难性的后果。匹配次数呈指数级增长。比如：对于简单的目标字符串helloworld，是星号会迭代10次，每一次迭代中[^'">]+匹配一个字符？还是星号迭代3次，内部的[^'">]+分别匹配5、2、3个字符？或者2、3、1、4个字符？还是其他情况？这样会把正则引擎搞疯掉的啦！
        匹配string
            其实匹配引号内字符串的最简单办法是用这个表达式：/"[^"]*"/ 不过我们要容许其中包含转义的引号，例如："we have a \"awesome\" world!" 下面进行任务分解：
            匹配起始引号
            匹配正文
            匹配结束引号
            不过由于转义之后的引号也能够出现的正文中，所以处理起来比较棘手哈。 我们还是以"we have a \"awesome\" world!"为例子。 如果JavaScript中有逆序环视(lookaround)可用，我们可以这样写：var pattern = /"([^"]|(?<=\\)")*"/ 但是这个正则表达式无法匹配下面这两个无聊的例子："/-|-\\" or "[^-^]" 我本来想匹配"/-|-\\"，结果匹配的确是"/-|-\\" or " 注：
            这里的结束分隔符是一个引号，但正文也可能包含转义之后的引号。匹配开始和结束分隔符很容易，诀窍就在于，匹配正文的时候不要超越结束分隔符。 匹配正文的思路：1、不是引号：由[^"]匹配。2、是一个引号，而它左边又有一个反斜杆，那么这个引号也属于正文。使用逆序环视：/"([^"]|(?<=\\)")*"/
            鉴于上面的例子，我们需要对var pattern = /"([^"]|(?<=\\)")*"/进行修改！ 第一个表达式的问题在于，我们把反斜杆认为只是用来转义引号的，其实反斜杆在字符串中可以用来转义任何字符。因此，我们要匹配的文本其实是开始引号和结束引号之间，包括转义字符和非引号的任何字符。得到：/"(\\.|[^"])*"/
            不过！
            上面的表达式还是会错误的匹配："You need a new\"world\" haha. 中的"You need a new\"world\" 即使这并不是一个字符串。 因为，这个表达式一开始匹配到了引号之后的文本，如果找不到结束的引号，它就会回溯。而[^"]匹配到了world\里的反斜杆后，之后的那个引号会被表达式认为是一个结束的引号。。。
            继续改改改！
            所以我们需要保证，字符串里的反斜杆不能以[^"]方式匹配。要将[^"]改为[^\\"] 上面的正则表达式使用了JavaScript正则表达式并不兹瓷的逆序环视，这里给出JavaScript支持的版本。 /(["'])(((\\.|[^\1\\])*)+)\1/ 或者 /^(['"])(((\\['"])?([^\1])*)+)\1/
    4.try catch 原理
        VC++的try/catch是基于Win32的SEH实现的。 (SEH) https://blog.csdn.net/yygydjkthh/article/details/38363635
        try/catch只能捕捉当前线程的异常，每个线程都有自己的异常处理入口。
        异常处理入口是由OS负责调用的，在异常发生时。
        为了使用SEH，VC++编译器自动生成了很多的代码。
        MSDN上关于SEH的经典文章
            https://www.cnblogs.com/awpatp/archive/2010/06/15/1758763.html
            每个线程一个callback: _EXCEPTION_RECORD  EstablisherFrame _CONTEXT DispatcherContext  
            callback登记->EXCEPTION_REGISTRATION:
                线程信息块(TEB或TIB). 这个结构体当中的某些field在Windows NT, Windows? 95, Win32s, 和OS/2是一样的. TIB的第一个DWORD是一个指向线程的EXCEPTION_REGISTRATION的指针. 在Intel的Win32平台上, FS寄存器永远指向当前的TIB. 即, 在FS:[0]的位置, 你可以找到一个指向EXCEPTION_REGISTRATION结构的指针
            try-catch:所有在try块中的代码都被一个EXCEPTION_REGISTRATION 保护着, 这个EXCEPTION_REGISTRATION 是构建在函数的栈帧上的(stack frame). 在入口处,   这个新的EXCEPTION_REGISTRATION 会被放在exception handler的链表的头部. 在_try块的结尾, 它的EXCEPTION_REGISTRATION 会被从链表的头部移除. 正如我早些时候提到的, exception handler链表的头是存储在FS:[0]当中的
        CodeProject上的模拟实现
            How a C++ compiler implements exception handling
            https://www.codeproject.com/Articles/2126/How-a-C-compiler-implements-exception-handling
        CLR的实现
            The Exception Model
            https://blogs.msdn.microsoft.com/cbrumme/2003/10/01/the-exception-model/
        CLR 中未处理异常的处置
            //捕获GUI异常，无GUI则不需要加
            Application.ThreadException += new System.Threading.ThreadExceptionEventHandler(Application_ThreadException);//
            //捕获线程异常，捕获不了GUI异常
            AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;//msheng,处理线程异常
            https://blog.csdn.net/sgzwiz/article/details/40980527
        浅析CLR的异常处理模型
            http://www.itdaan.com/blog/2018/06/03/1cfc5e5d03cd1281c019632c65f4a5f3.html
                异常重置
                CER（约束执行区域）:RuntimeHelpers.PrepareConstrainedRegions() & ReliabilityContract特性修饰
20180920
    1.setjump/longjump => 可以用来做异常处理
        #include <stdio.h>
        #include <setjmp.h>
        jmp_buf buf;
        void haha()
        {
            printf("in haha()\n");
            longjmp(buf,1);
            printf("kaonima\n");
        }
        int tim=0;
         
        int main()
        {
            if(setjmp(buf))
            {
                printf("back in main\n");
                tim++;
            }
            else
            {
                printf("first time through\n");
                haha();
            }
            if(tim<3) longjmp(buf,1);
            return 0;
        }
        out:
        first time through
        in haha()
        back in main
        back in main
        back in main
        ps:a.如果setjmp所在的函数已经调用返回了，那么longjmp使用该处setjmp所填写的对应jmp_buf缓冲区将不再有效。这是因为longjmp所要返回的"栈帧"(stack frame)已经不再存在了，程序返回到一个不再存在的执行点，很可能覆盖或者弄坏程序栈
           b.setjmp与longjmp如果跳出了当前函数的话，当前函数中声明的对象可是不会被析构的（不会调用析构函数），那么就存在了一定的危险
            class Rainbow
            {
            public:
                Rainbow() {cout<<"Rainbow()"<<endl;}
                ~Rainbow() {cout<<"~Rainbow()"<<endl;}
            };
            jmp_buf jmpBuf;
            void Summer()
            {
                Rainbow rb;
                for(int i=3;i>0;--i)
                    cout<<"Happy Chinese Valentine's Day!"<<endl;
                longjmp(jmpBuf,2);
                
                //下面这句被忽略
                cout<<"Oh no.I am being ignore."<<endl;
            }

            int main()  
            {  
                test();
                if(!setjmp(jmpBuf))
                {
                    cout<<"setjmp() return a zero value!"<<endl;
                    Summer();
                }
                else
                {
                    cout<<"setjmp() get a non-zero value!"<<endl;
                }
                return 0;  
            }
            经测试，G++下并不会调用该析构函数。当然，你需要考虑编译器的智能程度，可能帮你做优化了
    2.how to share data between stored procedures
        a.out put parameters
            CREATE PROCEDURE insert_customer @name    nvarchar(50),
                                 @address nvarchar(50),
                                 @city    nvarchar(50),
                                 @cust_id int OUTPUT AS
            BEGIN TRANSACTION
            SELECT @cust_id = coalesce(MAX(cust_id), 0) + 1 FROM customers (UPDLOCK)
            INSERT customers (cust_id, name, address, city)
               VALUES (@cust_id, @name, @address, @city)
            COMMIT TRANSACTION
            =>EXEC insert_customer @name, @address, @city, @cust_id OUTPUT
        b.Table-valued Functions
            inline functions
                An inline function is a parameterised view (UDF user define function)
                There are a couple of system functions you cannot use in a UDF, because SQL Server thinks it matters that they are side-effecting
            multi-statement functions      pS.看起来表值函数所做的事情和存储过程并无不同，但实际上还是有所差别。是因为表值函数可以被用于写入其他查询，而存储过程不行。此外，表值函数和Apply操作符联合使用可以极大的简化连接操作。
                如果存储过程符合下述条件的其中一个，可以考虑重写为表值函数。
                存储过程逻辑非常简单，仅仅是一个Select语句，不用视图的原因仅仅是由于需要参数。
                存储过程中没有更新操作。
                存储过程中没有动态SQL。
                存储过程中只返回一个结果集。
                存储过程的主要目的是为了产生临时结果集，并将结果集存入临时表以供其他查询调用。
               动态SQL:   使用exec命令，语法：exec sql: exec命令有两个用途，一个是用来执行存储过程，另一个是执行动态SQL
                          使用系统存储过程 exec excutesql  参数1,参数2,参数3: 其中参数1是要执行的动态SQL语句，参数2是输入的参数的定义，参数3是输入的参数的值
20180926
    1.笛卡尔积与表连接
        一、（多表）连接方式分类
            T-SQL提供两种连接方式：传统方式和SQL连接方式
                1.传统方式：SELECT 列1，列2，列3.... FROM  表1，表2，表3... WHERE condition
                  这种方式会把表1,2,3做笛卡尔积（根据测试结果推测，不一定准确）
                2.SQL连接方式:
                    1>.INNER JOIN，内联，系统默认，相当于JOIN 。返回多表之间完全匹配的结果。
                    2>.LETF JOIN ,左联，返回除了有完全匹配的结果还有左表所有行。
                    3>.RIGHT JOIN ,右联，返回除了有完全匹配的结果还有右表所有行。
                    4>.Full JOIN ，完全外链接，返回除了有完全匹配的结果还有左右表所有行。
                       其中LETF JOIN、RIGHT JOIN和Full JOIN 均属于外连接（OUTER JOIN）
                    5>.CROSS JOIN,交叉连接，又称为自然连接，即生成一个笛卡尔积。（应该类似于传统方式）
        二、SQL Server JOIN 内部实现的三种算法：
            1. Loop join（嵌套循环），   即首先遍历 A，将A表中的每一条记录与 B表进行连接比较，如果满足A.di=B.id，则返回记录；
            2. Merge join（合并连接）， 即首先对A,B表进行排序，然后同时遍历A和B表，进行A.id=B.id的验证，直到遍历到A和B表结束；
            3. Hash join（哈希连接）， 即首先对A表所有记录的id进行hash计算，最终形成一个hash表，然后join时，遍历B表，对B表每条记录的id进行hash运算，然后在A的Hash表中验证是否一致，最后得出结果
        总结
            a.两表直接笛卡尔积的结果数量是两表的数据量相乘
            b.带where条件id相等的笛卡尔积和inner join结果相同，但是inner join效率快一点
            c.left join：TEST_A表的ID为空时拼接TEST_B表的内容为空，right join则相反
            d.full join：等于left join和right join的并集
            e.cross join => 笛卡尔积
        三、关于连接
            首先划分一下，连接分为三种：内连接、外连接、交叉连接? 
            内连接(INNER JOIN)：? 
            ??? 分为三种：等值连接、自然连接、不等连接? 
            ????? 
            外连接(OUTER JOIN)：? 
            ??? 分为三种：? 
            ??? 左外连接(LEFT OUTER JOIN或LEFT JOIN)? 
            ??? 右外连接(RIGHT OUTER JOIN或RIGHT JOIN)? 
            ??? 全外连接(FULL OUTER JOIN或FULL JOIN)? 
            ? 
            交叉连接(CROSS JOIN)：? 
            ??? 没有WHERE 子句，它返回连接表中所有数据行的笛卡尔积?
            
            a. 交叉连接 CROSS JOIN:
                如果不带WHERE条件子句，它将会返回被连接的两个表的笛卡尔积，返回结果的行数等于两个表行数的乘积； 举例
                SELECT * FROM table1 CROSS JOIN table2 等同于
                SELECT * FROM table1,table2
                一般不建议使用该方法，因为如果有WHERE子句的话，往往会先生成两个表行数乘积的行的数据表然后才根据WHERE条件从中选择。 因此，如果两个需要求交际的表太大，将会非常非常慢，不建议使用
            b.内连接 INNER JOIN :
                如果仅仅使用 SELECT * FROM table1 INNER JOIN table2 没有指定连接条件的话，和交叉连接的结果一样。 但是通常情况下，使用INNER JOIN需要指定连接条件。
                -- 等值连接(=号应用于连接条件, 不会去除重复的列) SELECT * FROM table1 AS a INNER JOIN table2 AS b on a.column=b.column
                -- 不等连接(>,>=,<,<=,!>,!<,<>) 例如 SELECT * FROM table1 AS a INNER JOIN table2 AS b on a.column<>b.column
                -- 自然连接(会去除重复的列)
            c.外连接 OUTER JOIN:
                首先内连接和外连接的不同之处:
                内连接如果没有指定连接条件的话，和笛卡尔积的交叉连接结果一样.
                但是不同于笛卡尔积的地方是，没有笛卡尔积那么复杂地要先生成行数乘积的数据表.
                内连接的效率要高于笛卡尔积的交叉连接.
                指定条件的内连接，仅仅返回符合连接条件的条目.?
                外连接则不同，返回的结果不仅包含符合连接条件的行，而且包括左表(左外连接时), 右表(右连接时)或者两边连接(全外连接时)的所有数据行
    2.LINQ技术内幕 11章 联结查询结果 结束
        into: into子句可以创建一个临时标识符，使用该标识符可以存储group、join或select子句的结果
        left join:from ...　join ... on ... into sub
                    from ... in sub.DefaultIfEmpty()
        组合键: ...on new {cross.CustomerID,cross.ProductID} quals new {groupJoin.CustomerID,groupJoin,ProductID}
    
20180927
    1.LINQ技术内幕 13章 使用Linq查询关系型数据库 结束
        DataContext LINQ to SQL 框架的主入口点
            a.context.Log = Console.Out => 输出生成的sql语句
              context.GetCommand()
            b.对每个数据库封装自己的DataContext子类
            c. 手动添加 
               or 设计器生成
               or sqlmeta
        Linq to DataSet base on ado.net
    2.LINQ技术内幕 14章 创建更好的实体以及映射继承与集合
        可空类型 Type?/Nullable<T> <=> [Column(CanBeNull = true)]
20181012
    1.LINQ技术内幕 14章 创建更好的实体以及映射继承与集合
        a. LINQ  to SQL 如何管理继承->单表映射(属性并集,性能好)
        [Database(Name = "Inheritance")]
        public class Inheritance : DataContext
        {
            private static readonly string connectionString = "";

            public Inheritance()
                : base(connectionString)
            {
                this.Log = Console.Out;
            }

        }

        [Table(Name = "Person")]
        [InheritanceMapping(Code = "P", Type = typeof(Person), IsDefault = true)]
        [InheritanceMapping(Code = "A", Type = typeof(Patient))]
        [InheritanceMapping(Code = "V", Type = typeof(VendorContact))]
        public class Person
        {
            [Column(IsPrimaryKey = true)]
            public int PersonID { get; set; }

            [Column(IsDiscriminator = true)] =============================>鉴别器
            public char KindKey { get; set; }

            [Column()]
            public string FirstName { get; set; }

            [Column()]
            public string LastName { get; set; }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder();
                /*...*/
                return sb.ToString();
            }
        }
        public class Patient : Person
        {
            [Column()]
            public char Gender { get; set; }
            [Column()]
            public int Age { get; set; }
            [Column(CanBeNull = true)]
            public DateTime? DateOfLastVisit { get; set; }
        }
        public class VendorContact : Person
        {
            [Column()]
            public string Title { get; set; }
            [Column()]
            public int CompanyID { get; set; }
        }
     
        b.LINQ to SQL 管理关联 EntitySet<T>类型
20181015
    1.LINQ技术内幕 14章 创建更好的实体以及映射继承与集合 结束
        b.LINQ to SQL 管理关联 EntitySet<T>类型
            ...
                private EntitySet<Order> orders;
                [Association(Storage="orders",OtherKey="CustomerID")]
                public EntitySet<Order> Orders
                {
                    get {return orders;}
                    set {orders.Assign(value);}
                }
            ...
            [Table(Name="Orders")]
            public class Order
            {
                ...
            }
20181023
    1.冲突域与广播域 以及 hub switch router  https://blog.csdn.net/gui951753/article/details/79402528
        冲突域:连接在同一导线上的所有工作站的集合，或者说是同一物理网段上所有节点的集合或以太网上竞争同一带宽的节点集合。这个域代表了冲突在其中发生并传播的区域
        广播域:接收同样广播消息的节点的集合
        由于广播域被认为是OSI中的第二层概念，所以象Hub，交换机等第一，第二层设备连接的节点被认为都是在同一个广播域。而路由器，第三层交换机则可以划分广播域，即可以连接不同的广播域
        各层设备
        将网络互相连接起来要使用一些中间设备（或中间系统），OSI的术语称之为中继（relay）系统。根据中继系统所在的层次，可以有以下五种中继系统： 
            1.物理层（即常说的第一层、层L1）中继系统，即转发器（repeater）或集线器（hub）。 
            2.数据链路层（即第二层，层L2），即交换机(switch)或网桥（bridge）。 
            3.网络层（第三层，层L3）中继系统，即路由器（router）(or 三层交换机)。 
            4.网桥和路由器的混合物桥路器（brouter）兼有网桥和路由器的功能。 
            5.在网络层以上的中继系统，即网关（gateway）
        集线器hub:
            集线器（Hub）是指将多条以太网双绞线或光纤集合连接在同一段物理介质下的设备。集线器是运作在OSI模型中的物理层。它可以视作多端口的中继器，若它侦测到碰撞，它会提交阻塞信号
            集线器最大的特点就是采用共享型模式，就是指在有一个端口在向另一个端口发送数据时，其他端口就处于“等待”状态
        交换机switch
            为什么要使用交换机： 
                我们使用hub连接局域网的时候，如果局域网内的主机高达上千台，那么会变得冲突域就会很大，很容易造成网络的堵塞。
                所以就有人设想能不能找个设备来阻断这个大的冲突域，将其划分为各个小的冲突域。这样就能优化网络性能了
            交换机要转发这样的数据包,简单来说，也就是使用交换机切割了冲突域，没有切割广播域
            交换机分为：二层交换机，三层交换机或是更高层的交换机。三层交换机同样可以有路由的功能
        路由器route
            工作在OSI第三层(网络层)上、并且有连接不同类型网络的能力并能够选择数据传送路径的网络设备
            路由器工作在网络层，可以识别网络层的地址-IP地址，有能力过滤第3层的广播消息。
            实际上，除非做特殊配置，否则路由器从不转发广播类型的数据包。因此，路由器的每个端口所连接的网络都独自构成一个广播域
            路由器的每个端口所连接的网络都独自构成一个广播域。所以我们可以知道路由器切分了冲突域和广播域
        冲突域和广播域的计算
            路由器:每一个连接是一个广播域,也是一个冲突域
            交换器:每一个连接是一个冲突域
            集线器:并部分
            ps:路由器和交换器之间也是冲突域
20181031
    1.Visual Studio 中为文件添加链接（快捷方式、引用）
      在一个解决方案中一般来说包括了多个项目，可能有一具项目的某文件会被其它几个项目使用，为了保持其文件的统一性，更好的管理及同步，采用将文件添加为链接更为有效
      https://www.cnblogs.com/blackcore/archive/2010/10/18/1854108.html
    2.Visual Studio .NET开发中的x86/x64/AnyCPU
      https://blog.csdn.net/lordwish/article/details/52312015
      http://www.timegowhere.com/post/about_vs_targetplatform.html
    3.java web 权限控制+拦截器
      研究了一下自己系统后台管理的权限控制
      基本上是 user-role-module-action 每个界面元素隶属于一个module并且有一个actionid表示其动作类型
    4.C/C++ 64位和32位互相调用
      外接com服务 https://blog.csdn.net/nie2314550441/article/details/49867735
      WM_COPYDATA + 共享内存 https://blog.csdn.net/jiyanglin/article/details/53548124