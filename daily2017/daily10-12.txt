20171011
        1.系统架构设计师 第十二章 软件架构设计
20171017
        1.系统架构设计师 第十三章 系统安全性与保密性
        2.表达式树->linq to XXX
20171018
        1.系统架构设计师 第十五章 分布式系统
20171019 - 20171020
        1.系统架构师基础知识完成
        2.Git => GitHub 远程关联 clone
        3..net 书籍 源码 调试
        4.正则表达式 分组匹配 断言
20171023
        1.git remote fetch/merge pull
20171026
        1.git fetch/merge push熟悉使用
        2.git branch checkout merge(fast-forward vs no-ff)
        3.notepad++/git bash => utf-8 无bom 
20171027
        1.git 比较差异 文件差异--stat 内容差异 branch1 branch2 file_name 
              重定向 >覆盖 >>追加
        2.udp通信 
            方法一： 
            socket----->sendto()或recvfrom() 
            方法二： 
            socket----->connect()----->send()或recv() => connect不进行握手 至绑定ip地址和端口
20171030-20171031
        1.系统架构设计师系统开发基础 结束
        2.git :fetch后比较内容差异 git diff HEAD FETCH_HEAD
               HEAD 是本地仓库，不是本地工作区
               其实应该是直接git diff FETCH_HEAD 就可以直接比较fetch下来的内容和本地工作区的区别了
20171101
        1.系统架构设计师操作系统 结束
        2.git 配置图形化比较工具
20171102
        1.系统架构设计师 数据库系统 结束
        2.内存映射文件 
        -> C++临时对象(不再堆上):
                        1.隐式类型转换
                        2.值传递方式给函数传递参数
                        3.函数返回一个对象
        3.系统架构设计师 计算机网络
20171103
        1.系统架构设计师 计算机网络 结束 参考http://blog.csdn.net/shujun19941226/article/details/50903384
        2.系统架构设计师 软件架构设计
        3.设计模式
            创建性模式
                简单工厂
                    活字印刷术:可维护 可复用 可扩展 => 面向对象
                抽象工厂
                工厂方法 (虚拟构造器)
                建造者   复杂对象的创建算法应该独立于对象的组成部分以及它们的装配方式时适用的模式
                原型     浅拷贝  深拷贝
                单例 
20171104-20171105
        1.软件架构设计师 应用数学 结束
20171106-20171108
        1.软件架构设计师 视频教程结束
20171109-20171111
        1.软件架构设计师考试
20171114
        1.XML:DTD Schema XSLT
20171208
        1.sql server 数据库日志 https://www.cnblogs.com/tylerdonet/p/3550434.html
            数据库的三个模式：简单，批量更新和完全，简单模式LOG文件不会自动增大或不会自动增大很多，因为每当发生一个检查点，它就可以覆盖以前的日志空间；批量和完全，只有当你备份了日志内容后，日志空间才可以被覆盖利用，因此，如果你当你的数据库在完全模式时，你限制了日志文件的大小，那么如果你的数据库日志文件不及时备份，可能会导致系统挂起。
            另外，如果你限制日志文件增长，那么你可以在企业管理器里通过数据库的属性，然后在属性窗口更改日志文件的属性，即取消日志文件增长就可以，当然你也可以限制文件增长的最大尺寸。

            治标的方法:DBCC SHRINKDATABASE(yourdatabase)
            或 分离数据库 然后把test.ldf拷贝到其他地方,在 附加数据库
            或
            1.清空日志
            DUMP  TRANSACTION  库名  WITH  NO_LOG    

            2.截断事务日志：
            BACKUP LOG 数据库名 WITH NO_LOG

            3.收缩数据库文件(如果不压缩,数据库的文件不会减小
            企业管理器--右键你要压缩的数据库--所有任务--收缩数据库--收缩文件
            --选择日志文件--在收缩方式里选择收缩至XXM,这里会给出一个允许收缩到的最小M数,直接输入这个数,确定就可以了
            --选择数据文件--在收缩方式里选择收缩至XXM,这里会给出一个允许收缩到的最小M数,直接输入这个数,确定就可以了

            治本的方法:如果你的日志不是很重要的话,把数据库的故障还原模型设为简单,并且设置为自动收缩(在企业管理器里面可以操作)
20171213
        1.英语中"详见附件"的标准说法
          千万别说 please find the attachment
          attach/enclose  Attached/Enclosed please find report/ppt/document
        2.理解 I don't trust you because you are honest
          I don't trust you, because you are honest 我不信任你,因为你诚实 这句话逻辑有问题但是加了逗号(comma)就是这个意思
          I don't trust you because you are honest 我并不是因为你诚实才信任你
        3.what the hell is bitcoin
20171218
        1.bitcoin
            区块链
            挖矿-> 记账奖励
20171219
        1.javascript bom
20171220
        1.sql server 字符串转义"'" => "''"
20171231
        1.SqlServer修改表结构
            增加字段
            ALTER TABLE [TName] ADD [CName] [Type] [not / null] [default Value];
            删除字段
            ALTER TABLE [TName] DROP COLUMN [CName]
            修改字段名
            ALTER TABLE [TName] RENAME COLUMN [OldName] TO [NewName]
            修改字段类型
            ALTER TABLE [TName] ALTER COLUMN [CName] [Type] [not / null]
        2.git
            git status -s表示short
            
            git mv 重命名文件  该命令同时修改工作区和暂存区的文件名
                运行git mv 其实就相当于运行了3条命令：
                mv test.txt TEST
                git rm test.txt
                git add TEST
                mv一个文件如果不修改内容 可以直接commit
                
            git diff 比较的是工作区和暂存区的差别
            git diff --cached 比较的是暂存区和版本库的差别
            git diff HEAD 可以查看工作区和版本库的差别
            
            git add -A和 git add .   git add -u在功能上看似很相近，但还是存在一点差别
            git add .  ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。
            git add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写）
            git add -A ：是上面两个功能的合集（git add --all的缩写）