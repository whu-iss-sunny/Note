20191120
1.git clone 与 fork https://www.cnblogs.com/chenxiang613/p/10240133.html
    git clone 是在自己电脑（这里我是ubuntu）直接敲命令，结果是将github仓库中的项目克隆到自己本地电脑中了
    fork是直接访问github网站，在项目页面中点击fork，然后自己github项目中就会多出一个复制的项目
    
20191125
1.字节对齐的底层原理 
    https://blog.csdn.net/zhangyanfei01/article/details/101096913
    chip-bank : bank间并行 8个bank 所以8字节对其
    所以，内存对齐最最底层的原因是内存的IO是以8个字节64bit为单位进行的
    换个例子，假如你指定要获取的是0x0001-0x0008，也是8字节，但是不是0开头的，内存需要怎么工作呢？‘’
    没有好办法，内存只好先工作一次把0x0000-0x0007取出来，然后再把0x0008-0x0015取出来，把两次的结果都返回给你。 
    CPU和内存IO的硬件限制导致没办法一次跨在两个数据宽度中间进行IO。
    扩展1：事实上，编译和链接器会自动替开发者对齐内存的，尽量帮你保证一个变量不跨列寻址。但是他不能做到十分完美。
    扩展2：其实在内存硬件层上，还有操作系统层。操作系统还管理了CPU的一级、二级、三级缓存。不知道你有没有印象，我们前面的文章说过高速缓存里的Cache Line也是64字节，它是内存IO的整数倍，不会让内存IO浪费。

2.再谈"闭包"
    https://zhuanlan.zhihu.com/p/31616347

20191126
1.C#函数式程序设计 16章
    用表达式构建和编译某个类型的构造函数，比反射要快得多。
2.C#函数式程序设计 17章 （单子 函子） 
    https://www.zhihu.com/question/19635359

20191127
1.再谈“ref”传参 https://www.cnblogs.com/qidong/p/11155708.html
        
        private static void ChangeVal(DataModel c)
        {
            var b = c;
            c = new DataModel() { Value = 2 };
            Console.WriteLine($"b = {b.Value}");
            Console.WriteLine($"c = {c.Value}");
        }
        private static void Test2()
        {
            var a = new DataModel() { Value = 1 };
            ChangeVal(a);
            Console.WriteLine($"a = {a.Value}");
            //Output: a=1 b=1 c=2
        }
        
        private static void ChangeVal(ref DataModel c)
        {
            var b = c;
            c = new DataModel() { Value = 2 };
            Console.WriteLine($"b = {b.Value}");
            Console.WriteLine($"c = {c.Value}");
        }
        private static void Test3()
        {
            var a = new DataModel() { Value = 1 };
            ChangeVal(ref a);
            Console.WriteLine($"a = {a.Value}");
            //Output: a=2 b=1 c=2
        }
2.net 进阶
    nopcommerce 
        http://www.nopchina.net/ nopcommerce是国外asp.net领域一个高质量的b2c开源项目，基于EntityFramework和MVC开发
        https://blog.csdn.net/wingxabc/article/details/79049853
    orchard
        https://www.cnblogs.com/zhoujg/archive/2011/02/10/1950766.html
        https://blog.csdn.net/lg343028751/article/details/49127257
    ABP ASP.NET Boilerplate Project（ABP）框架 
        http://baijiahao.baidu.com/s?id=1601846947942562830&wfr=spider&for=pc
    spring boot 
    
20191128
    1.plinq 并行 LINQ https://docs.microsoft.com/zh-cn/dotnet/standard/parallel-programming/parallel-linq-plinq
        通过并行执行，通常只需向数据源添加 AsParallel 查询操作，PLINQ 即可显著提升性能（与某些类型查询的旧代码相比）。 
        但是，并行可能会引入其自身的复杂性，因此并非所有的查询操作的运行速度在 PLINQ 中都更快。 
        事实上，并行实际上会降低某些查询的速度。 因此，应了解排序等问题将如何对并行查询产生影响。 
        有关详细信息，请参阅了解 PLINQ 中的加速。
    2.不可变数据类型 https://www.cnblogs.com/mushroom/p/4373951.html
        不可变队列，不可变列表等数据结构如果都自己实现工作量确实有点大。幸好的是Net在4.5版本已经提供了不可变集合的基础类库。 
        不可变本身的优点即是缺点，当每次对象/集合操作都会返回个新值。而旧值依旧会保留一段时间，这会使内存有极大开销，也会给GC造成回收负担，性能也比可变集合差的多。
        另外一个缺点比较有趣，也有不少人忽略。 由于string的不可变特性，所以当我们使用string在保存敏感信息时，就需要特别注意。
        比如密码 var pwd="mushroomsir"，此时密码会以明文存储在内存中，也许你稍后会加密置空等，但这都是会生成新值的。而明文会长时间存储在共享域内存中，任何能拿到dump文件的人都可以看到明文，增加了密码被窃取的风险。
        当然这不是一个新问题，net2.0提供的有SecureString来进行安全存储，使用时进行恢复及清理。
    
20191129
    1.C#表达式树 https://www.cnblogs.com/Terrylee/archive/2008/08/01/custom-linq-provider-part-1-expression-tree.html
        当我们在C#语言中编写一个查询表达式时，它将返回一个IQueryable类型的值，在该类型中包含了两个很重要的属性Expression和Provider，如下面的代码：
        public interface IQueryable:IEnumerable
        {
            Type ElementType { get; }
            Expression Expression { get; }
            IQueryProvider Provider { get; }
        }
        我们编写的查询表达式，将封装为一种抽象的数据结构，这个数据结构就是表达式目录树，当我们在使用上面返回的值时，编译器将会以该值所期望的方式进行翻译，这种方式就是由Expression和Provider来决定。
        可以看到，这样将会非常的灵活且具有良好的可扩展性，有了表达式目录树，可以自由的编写自己的Provider，去查询我们希望的数据源。
        经常说LINQ为访问各种不同的数据源提供了一种统一的编程方式，其奥秘就在这里。然而需要注意的是LINQ to Objects并不需要任何特定的LINQ Provider，因为它并不翻译为表达式目录树
    2.C# IQueryable和IEnumerable的区别 
        LINQ查询一共提供了两类扩展方法，在System.Linq命名空间下，有两个静态类：Enumerable类，它针对继承了IEnumerable<T>接口的集合进行扩展；Queryable类，它针对继承了IQueryable<T>接口的集合类进行扩扎。接口IQueryable<T>也是继承了IEnumerable<T>接口的，所以，致使两个接口的方法在很大程度上时一致的。
        LINQ查询从功能上来讲实际上可分为3类：LINQ to OBJECTS、LINQ to SQL、LINQ to XML。设计两套接口的目的在于区分对待LINQ to OBJECTS、LINQ to SQL，两者对于查询的处理在内部使用的是完全不同的机制。
        针对LINQ to OBJECTS时，使用Enumerable中的扩展方法对本地集合进行排序和查询等操作，查询参数接受的是Func<>。Func<>叫做谓语表达式，相当于一个委托。
        针对LINQ to SQL时，则使用Queryable中的扩展方法，它接受的是Expression<>。
        Expression<>用于包装Func<>。LINQ to SQL最终会将表达式树转换成相应的SQL语句，然后在数据库中执行。
        简单的说：本地数据源用IEnumerable<T>，远程数据源用IQueryable<T>。
        1.Func<>谓词表达式，就是一个委托，委托一旦调用，就立即执行了，将执行结果保存在内存中。
        2.Expression是一个表达式，会存储拼接表达式树，直到在运行期最终执行。
        那么在EF中我们根据条件查询数据时，不应该把数据一次性加载到本地内存中，然后再本地内存中进行筛选，如果数据量大了，就崩溃了。
        我们需要将表达式组合好，然后再一起提交到数据库执行，返回查询结果。
        (每次在执行where查询操作符的时候IQueryProvider会为我们创建一个新的IQueryable<T>,调用AsEnumerable()方法的时候并不会去实际取值，只是
        得到了一个IEnumerable,所以EF在查询数据时候不要先取IEnumerable再去筛选数据。执行ToList方法时才会去真正调用迭代器GetEnumerator()
        取值。真正取值时候，会去执行IQueryProvider中的Excute方法.(解析表达式，然后执行取得结果))
        这就是IQueryable的延迟加载
    3.演练：创建 IQueryable LINQ 提供程序 https://docs.microsoft.com/zh-cn/previous-versions/bb546158(v=vs.120)?redirectedfrom=MSDN
20191224
    1.QQ迷你首页打不开、QQ群文件共享页面打开、QQ群公告页面打开不开等
        http://www.d9soft.com/school/soft_jiaocheng/49278.html
        使用了代理，如果我们使用了代理会导致迷你版打不开，把设置的代理取消掉就可以啦。取消方法，在ie面板，工具-internet选项-链接-局域网设置，把为LAN使用代理服务器的勾去掉即可
20191230
    1.if-else重构优化
    https://www.jianshu.com/p/b21dc8ad7ab4
        
    
