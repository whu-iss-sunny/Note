20191008
1.当析构函数遇到多线程 ── C++ 中线程安全的对象回调
https://www.cnblogs.com/Vancamel/p/11316410.html

20191018
1.MSSQL 存储过程中 打开SET NOCOUNT ON 不会返回Update或者Insert受影响的数据条数 

20191024
1.MSSQL 分组合计数量占总数比例
/************************************************Demon**************************************************/
SELECT 16426 AS UserID,
       t.ProductID,
       t.TradeAmount,
       t.TradeAmount / SUM(t.TradeAmount) OVER() AS TradeAmountRatio,
       t.GainAmount,
       t.GainAmount / SUM(t.GainAmount)OVER() AS GainAmountRatio,
       t.LossAmount,
       t.LossAmount /SUM(t.LossAmount) OVER() AS LossAmountRatio
  FROM (SELECT hi.ProductID,
               SUM(CASE WHEN OffsetFlag = 48 THEN ht.Volume * CAST(ht.Price AS MONEY) * hi.VolumeMultiple
                    ELSE 0 END) AS TradeAmount,
               SUM(CASE WHEN OffsetFlag <> 48 AND CloseProfitByTrade > 0 THEN CloseProfitByTrade
                    ELSE 0 END) AS GainAmount,
               SUM(CASE WHEN OffsetFlag <> 48 AND CloseProfitByTrade < 0 THEN CloseProfitByTrade
                    ELSE 0 END) AS LossAmount 
          FROM MidWarTrade.dbo.HisTrade ht,
               MidWarTrade.dbo.HisInstrument hi
         WHERE ht.InstrumentID = hi.InstrumentID 
           AND ht.TradingDay = hi.TradingDay
           AND ht.UserID = 16426
           AND ht.TradingDay BETWEEN 20191001 AND 20191023
         GROUP BY hi.ProductID) t
/************************************************Demon**************************************************/
    SqlServer中 OVER()函数 
        https://www.cnblogs.com/wxyz94/p/9385744.html
        https://www.cnblogs.com/cjm123/p/8033639.html
        https://docs.microsoft.com/zh-cn/sql/t-sql/queries/select-over-clause-transact-sql?redirectedfrom=MSDN&view=sql-server-ver15
    SqlServer中 Partition By 的使用
        https://blog.csdn.net/liuchang19950703/article/details/81003295
20191030
1.C++多线程环境下内存管理
 RAII机制
《操作系统设计与实现》 、 《现代操作系 统 》、《操作系统概念》、《Java Concurrency in Practice》（java并发编程实现） 《java并发编程的艺术》
2.C++内存管理
    https://www.cnblogs.com/findumars/p/5929831.html?utm_source=itdadao&utm_medium=referral
3.C语言内存管理
20191031
1.几种网络IO模型
    https://blog.csdn.net/bob_dadoudou/article/details/79476588
    异步IO要求process在recvfrom操作的两个处理阶段上都不能等待，也就是process调用recvfrom后立刻返回，kernel自行去准备好数据并将数据从kernel的buffer中copy到process的buffer在通知process读操作完成了，然后process在去处理。遗憾的是，linux的网络IO中是不存在异步IO的，linux的网络IO处理的第二阶段总是阻塞等待数据copy完成的。真正意义上的网络异步IO是Windows下的IOCP（IO完成端口）模型。很多时候，我们比较容易混淆non-blocking IO和asynchronous IO，认为是一样的。但是通过上图，几种IO模型的比较，会发现non-blocking IO和asynchronous IO的区别还是很明显的，non-blocking IO仅仅要求处理的第一阶段不block即可，而asynchronous IO要求两个阶段都不能block住。
    这种模型与信号驱动模型的主要区别在于：信号驱动I/O是由内核通知我们何时启动一个I/O操作，而异步I/O模型是由内核通知我们I/O操作何时完成

2.linux异步io
    linux下主要有两套异步IO，一套是由glibc实现的（以下称之为glibc版本）、一套是由linux内核实现，并由libaio来封装调用接口（以下称之为linux版本）
    
   https://blog.csdn.net/zhxue123/article/details/21087165 一般来说，服务器端的I/O主要有两种情况：一是来自网络的I/O；二是对文件(设备)的I/O。Windows的异步I/O模型能很好的适用于这两种情况。而Linux针对前者提供了epoll模型，针对后者提供了AIO模型(关于是否把两者统一起来争论了很久)。
    
    epoll et vs lt  
    https://www.jianshu.com/p/7c3400f86bb4
    https://my.oschina.net/u/989096/blog/1189269/
    
    LT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。
    ET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。
    LT和ET模式的优缺点

    LT模式
    LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。
    ET模式
    ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)。
    ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。
    在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。(此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在。)

3.高性能网络编程 http://www.52im.net/thread-561-1-1.html
《高性能网络编程(一)：单台服务器并发TCP连接数到底可以有多少》（本文）
《高性能网络编程(二)：上一个10年，著名的C10K并发连接问题》
《高性能网络编程(三)：下一个10年，是时候考虑C10M并发问题了》
《高性能网络编程(四)：从C10K到C10M高性能网络应用的理论探索》
《高性能网络编程(五)：一文读懂高性能网络编程中的I/O模型》
《高性能网络编程(六)：一文读懂高性能网络编程中的线程模型》
《高性能网络编程经典：《The C10K problem(英文)》[附件下载]》

4.windows iocp https://www.cnblogs.com/talenth/p/7068392.html
    