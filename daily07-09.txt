20170726-20170727
1.基元类型ToString是否装箱？No
2.String.Format是否装箱？ string.Format("{0},{1}",int/*装箱*/,int.ToString()/*不装箱*/) //string.Format 形参为object
3.win lib->1.静态库 2.动态库导出
4.Sql Server查询计划 
5.Sql Server基本优化 sql server profiler
6.Sql Server最大连接数 0=>不限制 32767 int.max
7.Xml Schemas
8.学英语 （不要盲目背单词）大量阅读 听 写
9.新西兰留学 移民
10.int为什么是-32768-32767 ：
原码 -32767-32767 （1-111111111111111,0-111111111111111） +0 0-000000000000000 -0 1-000000000000000 
补码即正数编码不变，从0000000000000000到0111111111111111依旧表示0到32767，而负数需要把除符号位以后的部分取反加1，即-32767的补码为1000000000000001。
到此，再来看原码的正0和负0：0000000000000000和1000000000000000，
补码表示中，前者的补码还是0000000000000000，
后者经过非符号位取反加1后，同样变成了0000000000000000，
也就是正0和负0在补码系统中的编码是一样的。
但是，我们知道，16位二进制数可以表示2的16次方个编码，而在补码中零的编码只有一个，也就是补码中会比原码多一个编码出来，这个编码就是1000000000000000，
因为任何一个原码都不可能在转成补码时变成1000000000000000。所以，人为规定1000000000000000这个补码编码为-32768。
所以，补码系统中，范围是-23768～32767。  

20170728
1.mvvm ->.net : winform->wpf  web->asp.net mvc mvvm (前端angular.js)
2.接上10:补数 取模  溢出 (CSAPP第二章 计算机组织与体系结第九章) http://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html

20170814
1.xml schema
2.xml dom - html dom

20170815
1.clr vir C# 垃圾回收：
    CriticalFinalizerObject类型
    SOS调试
    SafeHandle类型
    IDisposable
2.雅思复习计划
   单词 阅读 听力 口语
   
20170821
1.javascript书籍
    入门：JavaScript Dom编程艺术 
          JavaScript权威指南 犀牛书
    进阶：JavaScript高级程序设计
          JavaScript语言精粹 蝴蝶书 Javascipt, The Good Parts
    高级：JavaScript DOM高级程序设计
          JavaScript设计模式
          高性能JavaScript
          JavaScript异步编程
    番外：Secrets of the JavaScript Ninja
          YOU DONT KNOW JAVASCRIPT
          JavaScript Patterns
          Effective JavaScript
2.js比较
    实际上，JavaScript允许对任意数据类型做比较：
    false == 0; // true
    false === 0; // false
    要特别注意相等运算符==。JavaScript在设计时，有两种比较运算符：
    第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；
    第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。
    由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。
    另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：
    NaN === NaN; // false
    唯一能判断NaN的方法是通过isNaN()函数：
    isNaN(NaN); // true
    最后要注意浮点数的相等比较：
    1 / 3 === (1 - 2 / 3); // false
    这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：
    Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true

20170822
1.JavaScript字符串
    转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\。
    ASCII字符可以以\x##形式的十六进制表示，例如：
    '\x41'; // 完全等同于 'A'
    还可以用\u####表示一个Unicode字符：
    '\u4e2d\u6587'; // 完全等同于 '中文'
    
    由于多行字符串用\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` ... ` 表示：
    `这是一个
    多行
    字符串`;
    
    如果有很多变量需要连接，用+号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：
    var name = '小明';
    var age = 20;
    var message = `你好, ${name}, 你今年${age}岁了!`;
    alert(message);
 
    需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：
    var s = 'Test';
    s[0] = 'X';
    alert(s); // s仍然为'Test'

2.JavaScript数组
    请注意，直接给Array的length赋一个新的值会导致Array大小的变化：
    var arr = [1, 2, 3];
    arr.length; // 3
    arr.length = 6;
    arr; // arr变为[1, 2, 3, undefined, undefined, undefined]
    arr.length = 2;
    arr; // arr变为[1, 2]
    
    Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array：
    var arr = ['A', 'B', 'C'];
    arr[1] = 99;
    arr; // arr现在变为['A', 99, 'C']
    请注意，如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化：
    var arr = [1, 2, 3];
    arr[5] = 'x';
    arr; // arr变为[1, 2, 3, undefined, undefined, 'x']
    大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的Array却不会有任何错误。在编写代码时，不建议直接修改Array的大小，访问索引时要确保索引不会越界。
    
3.JavaScript对象
    访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用''括起来：
    var xiaohong = {
        name: '小红',
        'middle-school': 'No.1 Middle School'
    };
    xiaohong的属性名middle-school不是一个有效的变量，就需要用''括起来。访问这个属性也无法使用.操作符，必须用['xxx']来访问：
    xiaohong['middle-school']; // 'No.1 Middle School'
    xiaohong['name']; // '小红'
    xiaohong.name; // '小红'
    也可以用xiaohong['name']来访问xiaohong的name属性，不过xiaohong.name的写法更简洁。我们在编写JavaScript代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过object.prop的形式访问一个属性了。
    实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。
    如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回undefined：
    var xiaoming = {
        name: '小明'
    };
    xiaoming.age; // undefined
    
    由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性：
    var xiaoming = {
        name: '小明'
    };
    xiaoming.age; // undefined
    xiaoming.age = 18; // 新增一个age属性
    xiaoming.age; // 18
    delete xiaoming.age; // 删除age属性
    xiaoming.age; // undefined
    delete xiaoming['name']; // 删除name属性
    xiaoming.name; // undefined
    delete xiaoming.school; // 删除一个不存在的school属性也不会报错
    如果我们要检测xiaoming是否拥有某一属性，可以用in操作符：

    var xiaoming = {
        name: '小明',
        birth: 1990,
        school: 'No.1 Middle School',
        height: 1.70,
        weight: 65,
        score: null
    };
    'name' in xiaoming; // true
    'grade' in xiaoming; // false
    不过要小心，如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的：

    'toString' in xiaoming; // true
    因为toString定义在object对象中，而所有对象最终都会在原型链上指向object，所以xiaoming也拥有toString属性。

    要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：

    var xiaoming = {
        name: '小明'
    };
    xiaoming.hasOwnProperty('name'); // true
    xiaoming.hasOwnProperty('toString'); // false
    
4.for-in
    由于Array也是对象，而它的每个元素的索引被视为对象的属性，因此，for ... in循环可以直接循环出Array的索引：
    var a = ['A', 'B', 'C'];
    for (var i in a) {
        alert(i); // '0', '1', '2'
        alert(a[i]); // 'A', 'B', 'C'
    }
    请注意，for ... in对Array的循环得到的是String而不是Number。

5.Map,Set => ES6 =>iterable => for ... of
    for ... in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。
    当我们手动给Array对象添加了额外的属性后，for ... in循环将带来意想不到的意外效果：
    var a = ['A', 'B', 'C'];
    a.name = 'Hello';
    for (var x in a) {
        alert(x); // '0', '1', '2', 'name'
    }
    for ... in循环将把name包括在内，但Array的length属性却不包括在内。
    for ... of循环则完全修复了这些问题，它只循环集合本身的元素：
    var a = ['A', 'B', 'C'];
    a.name = 'Hello';
    for (var x of a) {
        alert(x); // 'A', 'B', 'C'
    }
    这就是为什么要引入新的for ... of循环。
    然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：
    var a = ['A', 'B', 'C'];
    a.forEach(function (element, index, array) {
        // element: 指向当前元素的值
        // index: 指向当前索引
        // array: 指向Array对象本身
        alert(element);
    });
    注意，forEach()方法是ES5.1标准引入的，你需要测试浏览器是否支持
    
6.函数定义
    function abs(x) {
        if (x >= 0) {
            return x;
        } else {
            return -x;
        }
    }
    由于JavaScript的函数也是一个对象，上述定义的abs()函数实际上是一个函数对象，而函数名abs可以视为指向该函数的变量。
    var abs = function (x) {
        if (x >= 0) {
            return x;
        } else {
            return -x;
        }
    };
    在这种方式下，function (x) { ... }是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量abs，所以，通过变量abs就可以调用该函数。
    上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾加一个;，表示赋值语句结束。
7.函数调用与参数
    
    由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：
    abs(10, 'blablabla'); // 返回10
    abs(-9, 'haha', 'hehe', null); // 返回9
    传入的参数比定义的少也没有问题：
    abs(); // 返回NaN
    此时abs(x)函数的参数x将收到undefined，计算结果为NaN。
    要避免收到undefined，可以对参数进行检查：
    function abs(x) {
        if (typeof x !== 'number') {
            throw 'Not a number';
        }
        if (x >= 0) {
            return x;
        } else {
            return -x;
        }
    }
    
    arguments
    JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array。
    ES6标准引入了rest参数
7.变量提升
    JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：
    'use strict';
    function foo() {
        var x = 'Hello, ' + y;
        alert(x);
        var y = 'Bob';
    }
    foo();
    虽然是strict模式，但语句var x = 'Hello, ' + y;并不报错，原因是变量y在稍后申明了。但是alert显示Hello, undefined，说明变量y的值为undefined。这正是因为JavaScript引擎自动提升了变量y的声明，但不会提升变量y的赋值。
    对于上述foo()函数，JavaScript引擎看到的代码相当于：
    function foo() {
        var y; // 提升变量y的申明
        var x = 'Hello, ' + y;
        alert(x);
        y = 'Bob';
    }
    由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量：
    function foo() {
        var
            x = 1, // x初始化为1
            y = x + 1, // y初始化为2
            z, i; // z和i为undefined
        // 其他语句:
        for (i=0; i<100; i++) {
            ...
        }
    }
8.作用域
    全局作用域
    不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性：
    'use strict';
    var course = 'Learn JavaScript';
    alert(course); // 'Learn JavaScript'
    alert(window.course); // 'Learn JavaScript'
    因此，直接访问全局变量course和访问window.course是完全一样的。
    你可能猜到了，由于函数定义有两种方式，以变量方式var foo = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：
    'use strict';
    function foo() {
        alert('foo');
    }
    foo(); // 直接调用foo()
    window.foo(); // 通过window.foo()调用
    进一步大胆地猜测，我们每次直接调用的alert()函数其实也是window的一个变量：
    'use strict';
    window.alert('调用window.alert()');
    // 把alert保存到另一个变量:
    var old_alert = window.alert;
    // 给alert赋一个新函数:
    window.alert = function () {}
    alert('无法用alert()显示了!');
    // 恢复alert:
    window.alert = old_alert;
    alert('又可以用alert()了!');
     Run
    这说明JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误。
    
    名字空间
    全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。
    减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：
    // 唯一的全局变量MYAPP:
    var MYAPP = {};
    // 其他变量:
    MYAPP.name = 'myapp';
    MYAPP.version = 1.0;
    // 其他函数:
    MYAPP.foo = function () {
        return 'foo';
    };
    把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。
    许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。
    
    局部作用域
    由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：
    'use strict';
    function foo() {
        for (var i=0; i<100; i++) {
            //
        }
        i += 100; // 仍然可以引用变量i
    }
    为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：
    'use strict';
    function foo() {
        var sum = 0;
        for (let i=0; i<100; i++) {
            sum += i;
        }
        i += 1; // SyntaxError
    }
    
    常量 =>ES6 => const PI = 3.14; 块级作用域
9.this大坑 => apply,call
10. 高阶函数=>委托

    map/reduce -------------------------> MapReduce: Simplified Data Processing on Large Clusters http://www.cnblogs.com/fuzhe1989/p/3413457.html
    小明希望利用map()把字符串变成整数，他写的代码很简洁：
    'use strict';
    var arr = ['1', '2', '3'];
    var r;
    r = arr.map(parseInt);
    alert('[' + r[0] + ', ' + r[1] + ', ' + r[2] + ']');
     Run
    结果竟然是[1, NaN, NaN]，小明百思不得其解，请帮他找到原因并修正代码。

    filter => true false

    sort
    JavaScript的Array的sort()方法就是用于排序的，但是排序结果可能让你大吃一惊：
    // 看上去正常的结果:
    ['Google', 'Apple', 'Microsoft'].sort(); // ['Apple', 'Google', 'Microsoft'];
    // apple排在了最后:
    ['Google', 'apple', 'Microsoft'].sort(); // ['Google', 'Microsoft", 'apple']
    // 无法理解的结果:
    [10, 20, 1, 2].sort(); // [1, 10, 2, 20]
    第二个排序把apple排在了最后，是因为字符串根据ASCII码进行排序，而小写字母a的ASCII码在大写字母之后。
    第三个排序结果是什么鬼？简单的数字排序都能错？
    这是因为Array的sort()方法默认把所有元素先转换为String再排序，结果'10'排在了'2'的前面，因为字符'1'比字符'2'的ASCII码小。
11.Closure闭包 
    var that = this 传给子函数
    封装私有变量
    
20170823
1.Lambda表达式
    x=> x*x   
    (x,y) => {
        if(x>y) return x;
        else return y;
    }
    完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj：

    var obj = {
        birth: 1990,
        getAge: function () {
            var b = this.birth; // 1990
            var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象
            return fn();
        }
    };
    obj.getAge(); // 25
    如果使用箭头函数，以前的那种hack写法：var that = this;就不再需要了。
    由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略：
    var obj = {
        birth: 1990,
        getAge: function (year) {
            var b = this.birth; // 1990
            var fn = (y) => y - this.birth; // this.birth仍是1990
            return fn.call({birth:2000}, year);
        }
    };
    obj.getAge(2015); // 25
2.generator => ajax
    generator跟函数很像，定义如下：
    function* foo(x) {
        yield x + 1;
        yield x + 2;
        return x + 3;
    }
    generator和函数不同的是，generator由function*定义（注意多出的*号），并且，除了return语句，还可以用yield返回多次。
3.对象
    可见，number、string、boolean、function和undefined有别于其他类型。特别注意null的类型是object，Array的类型也是object，如果我们用typeof将无法区分出null、Array和通常意义上的object——{}。
    包装对象
    除了这些类型外，JavaScript还提供了包装对象，熟悉Java的小伙伴肯定很清楚int和Integer这种暧昧关系。
    number、boolean和string都有包装对象。没错，在JavaScript中，字符串也区分string类型和它的包装类型。包装对象用new创建：
    var n = new Number(123); // 123,生成了新的包装类型
    var b = new Boolean(true); // true,生成了新的包装类型
    var s = new String('str'); // 'str',生成了新的包装类型
    虽然包装对象看上去和原来的值一模一样，显示出来也是一模一样，但他们的类型已经变为object了！所以，包装对象和原始值用===比较会返回false：
    typeof new Number(123); // 'object'
    new Number(123) === 123; // false
    typeof new Boolean(true); // 'object'
    new Boolean(true) === true; // false
    typeof new String('str'); // 'object'
    new String('str') === 'str'; // false
    所以闲的蛋疼也不要使用包装对象！尤其是针对string类型！！！
    如果我们在使用Number、Boolean和String时，没有写new会发生什么情况？
    此时，Number()、Boolean和String()被当做普通函数，把任何类型的数据转换为number、boolean和string类型（注意不是其包装类型）：
    var n = Number('123'); // 123，相当于parseInt()或parseFloat()
    typeof n; // 'number'
    var b = Boolean('true'); // true
    typeof b; // 'boolean'
    var b2 = Boolean('false'); // true! 'false'字符串转换结果为true！因为它是非空字符串！
    var b3 = Boolean(''); // false
    var s = String(123.45); // '123.45'
    typeof s; // 'string'
    是不是感觉头大了？这就是JavaScript特有的催眠魅力！
    总结一下，有这么几条规则需要遵守：
    不要使用new Number()、new Boolean()、new String()创建包装对象；
    用parseInt()或parseFloat()来转换任意类型到number；
    用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；
    通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；
    typeof操作符可以判断出number、boolean、string、function和undefined；
    判断Array要使用Array.isArray(arr)；
    判断null请使用myVar === null；
    判断某个全局变量是否存在用typeof window.myVar === 'undefined'；
    函数内部判断某个变量是否存在用typeof myVar === 'undefined'。
    最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外，虽然null还伪装成了object类型。
    更细心的同学指出，number对象调用toString()报SyntaxError：
    123.toString(); // SyntaxError
    遇到这种情况，要特殊处理一下：
    123..toString(); // '123', 注意是两个点！
    (123).toString(); // '123'
    不要问为什么，这就是JavaScript代码的乐趣！
3.Date一个非常非常坑爹的地方，就是JavaScript的月份范围用整数表示是0~11，0表示一月，1表示二月……，所以要表示6月，我们传入的是5！这绝对是JavaScript的设计者当时脑抽了一下，但是现在要修复已经不可能了。
4.RegExp Javascript正则表达式
    贪婪匹配 默认 ？解除
    全局搜索 g
    var r1 = /test/g;
    // 等价于:
    var r2 = new RegExp('test', 'g');
    全局匹配可以多次执行exec()方法来搜索一个匹配的字符串。当我们指定g标志后，每次运行exec()，正则表达式本身会更新lastIndex属性，表示上次匹配到的最后索引：
    var s = 'JavaScript, VBScript, JScript and ECMAScript';
    var re=/[a-zA-Z]+Script/g;
    // 使用全局匹配:
    re.exec(s); // ['JavaScript']
    re.lastIndex; // 10
    re.exec(s); // ['VBScript']
    re.lastIndex; // 20
    re.exec(s); // ['JScript']
    re.lastIndex; // 29
    re.exec(s); // ['ECMAScript']
    re.lastIndex; // 44
    re.exec(s); // null，直到结束仍没有匹配到
    全局匹配类似搜索，因此不能使用/^...$/，那样只会最多匹配一次。
    正则表达式还可以指定i标志，表示忽略大小写，m标志，表示执行多行匹配。
20170824
1. javascript中的 || 与 &&
总结一下：
    1、只要“||”前面为false，无论“||”后面是true还是false，结果都返回“||”后面的值。
    2、只要“||”前面为true，无论“||”后面是true还是false，结果都返回“||”前面的值。
    3、只要“&&”前面是false，无论“&&”后面是true还是false，结果都将返“&&”前面的值;
    4、只要“&&”前面是true，无论“&&”后面是true还是false，结果都将返“&&”后面的值;
    由上两个测试可知，逻辑运算符，“||”和“&&”都是遵行短路原则，只要确定符号前面的真假，既可确定返回值。
    需要说明的是“&&”的优先级是高于“||”的，下面测试：
    alert(1||'a'&&2);
    返回结果是1。
    根据反证原理，我们假设“||”的优先级不低于“&&”（这里只所以用“不低于”，是为了同时证明等级相同的情况）。
    根据上面我们得出的结论（1），（1||'a'）将返回前面的值1，(1&&2)根据结论(4)应该返回后面的值2。这显然不对，由此可知“&&”的优先级是高于“||”的。
2.JavaScript Object-Oriented
    1.原型 __proto__ 方法 Object.create(obj)
    2.创建对象
        JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。
        例如，创建一个Array对象：
        var arr = [1, 2, 3];
        其原型链是：
        arr ----> Array.prototype ----> Object.prototype ----> null
        Array.prototype定义了indexOf()、shift()等方法，因此你可以在所有的Array对象上直接调用这些方法。
        当我们创建一个函数时：
        function foo() {
            return 0;
        }
        函数也是一个对象，它的原型链是：
        foo ----> Function.prototype ----> Object.prototype ----> null
        由于Function.prototype定义了apply()等方法，因此，所有函数都可以调用apply()方法。
        很容易想到，如果原型链很长，那么访问一个对象的属性就会因为花更多的时间查找而变得更慢，因此要注意不要把原型链搞得太长。
    3.构造函数
        new + function
        除了直接用{ ... }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数：
        function Student(name) {
            this.name = name;
            this.hello = function () {
                alert('Hello, ' + this.name + '!');
            }
        }
        你会问，咦，这不是一个普通函数吗？
        这确实是一个普通函数，但是在JavaScript中，可以用关键字new来调用这个函数，并返回一个对象：
        var xiaoming = new Student('小明');
        xiaoming.name; // '小明'
        xiaoming.hello(); // Hello, 小明!
        注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。
        新创建的xiaoming的原型链是：
        xiaoming ----> Student.prototype ----> Object.prototype ----> null
        也就是说，xiaoming的原型指向函数Student的原型。如果你又创建了xiaohong、xiaojun，那么这些对象的原型与xiaoming是一样的：
        xiaoming ↘
        xiaohong -→ Student.prototype ----> Object.prototype ----> null
        xiaojun  ↗
        用new Student()创建的对象还从原型上获得了一个constructor属性，它指向函数Student本身：
        xiaoming.constructor === Student.prototype.constructor; // true
        Student.prototype.constructor === Student; // true
        Object.getPrototypeOf(xiaoming) === Student.prototype; // true
        xiaoming instanceof Student; // true
        现在我们就认为xiaoming、xiaohong这些对象“继承”自Student。
        不过还有一个小问题，注意观察：
        xiaoming.name; // '小明'
        xiaohong.name; // '小红'
        xiaoming.hello; // function: Student.hello()
        xiaohong.hello; // function: Student.hello()
        xiaoming.hello === xiaohong.hello; // false
        xiaoming和xiaohong各自的name不同，这是对的，否则我们无法区分谁是谁了。
        xiaoming和xiaohong各自的hello是一个函数，但它们是两个不同的函数，虽然函数名称和代码都是相同的！
        如果我们通过new Student()创建了很多对象，这些对象的hello函数实际上只需要共享同一个函数就可以了，这样可以节省很多内存。
        要让创建的对象共享一个hello函数，根据对象的属性查找原则，我们只要把hello函数移动到xiaoming、xiaohong这些对象共同的原型上就可以了，也就是Student.prototype
        修改代码如下：
        function Student(name) {
            this.name = name;
        }
        Student.prototype.hello = function () {
            alert('Hello, ' + this.name + '!');
        };
        用new创建基于原型的JavaScript的对象就是这么简单！
        为了区分普通函数和构造函数，按照约定，构造函数首字母应当大写，而普通函数首字母应当小写，这样，一些语法检查工具如jslint将可以帮你检测到漏写的new。
        我们还可以编写一个createStudent()函数，在内部封装所有的new操作。一个常用的编程模式像这样：
        function Student(props) {
            this.name = props.name || '匿名'; // 默认值为'匿名'
            this.grade = props.grade || 1; // 默认值为1
        }
        Student.prototype.hello = function () {
            alert('Hello, ' + this.name + '!');
        };
        function createStudent(props) {
            return new Student(props || {})
        }
        这个createStudent()函数有几个巨大的优点：一是不需要new来调用，二是参数非常灵活，可以不传，也可以这么传：
        var xiaoming = createStudent({
            name: '小明'
        });
        xiaoming.grade; // 1
        如果创建的对象有很多属性，我们只需要传递需要的某些属性，剩下的属性可以用默认值。由于参数是一个Object，我们无需记忆参数的顺序。如果恰好从JSON拿到了一个对象，就可以直接创建出xiaoming。
    4.继承
        构造函数 prototype 与 constructor
        原型继承 不太直观（需要近一步理解 => http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html 这篇文章讲得比较清楚） 
        Class继承=>ES6 class extends super 比较直观
20170828
    1.javascript 高级程序设计面向对象
        理解对象
            属性
            特性
        创建对象
            构造函数\
                       组合原型模式与构造函数 =>创建自定义类型的标准方法
            原型模式/
            动态原型模式
            parasitic寄生构造函数模式
        继承
            原型继承
            构造函数绑定
            组合继承
            组合寄生
    2.临界区 线程调度
20170830
    1.英语思维是这样炼成的 https://book.douban.com/subject/4718495/
    2.Orange'S:一个操作系统的实现 https://book.douban.com/subject/3735649/
    3.自己动手写操作系统
20170906
    1.C++特化模版 右值引用=>移动语义（move semantic）和完美转发（perfect forward）
    2.C#表达式树
20170907
    1.SynchronizationLockException 当某个方法请求调用方拥有给定 Monitor 上的锁时将引发该异常，而且由不拥有该锁的调用方调用此方法。
    2.全局键盘监听 windows_api_hook
20170911
    1.begin to work with word power made easy
    2.系统架构设计师 第一章操作系统 ->进程管理
20170912
    1.javascript 浏览器对象
      window 对象
      navigator 对象的信息可以很容易地被用户修改，所以JavaScript读取的值不一定是正确的。很多初学者为了针对不同浏览器编写不同的代码，喜欢用if判断浏览器版本，例如：
        var width;
        if (getIEVersion(navigator.userAgent) < 9) {
            width = document.body.clientWidth;
        } else {
            width = window.innerWidth;
        }
        但这样既可能判断不准确，也很难维护代码。正确的方法是充分利用JavaScript对不存在属性返回undefined的特性，直接用短路运算符||计算：

        var width = window.innerWidth || document.body.clientWidth;
      location 对象
      document 对象 dom树根节点
        cookie -> httpOnly
      history
    2.操作DOM
        getElementById getElementsByTagName getElementsByClassName
        innerHTML innerText(textContent) style->CSS
20170913
    1.系统架构设计师 第一章操作系统 结束
    2.系统架构设计师 第二章数据库系统
20170914
    1.了解redis->集群与分布式->负载均衡
    2.逻辑英语第二季结束
20170915
    1.系统架构设计师 第二章数据库系统
    2.javascript DOM操作
        有两个办法可以插入新的节点。
            一个是使用appendChild，把一个子节点添加到父节点的最后一个子节点
            把<p id="js">JavaScript</p>添加到<div id="list">的最后一项：
            var
                js = document.getElementById('js'),
                list = document.getElementById('list');
            list.appendChild(js);
            现在，HTML结构变成了这样：

            <!-- HTML结构 -->
            <div id="list">
                <p id="java">Java</p>
                <p id="python">Python</p>
                <p id="scheme">Scheme</p>
                <p id="js">JavaScript</p>
            </div>
            因为我们插入的js节点已经存在于当前的文档树，因此这个节点首先会从原先的位置删除，再插入到新的位置
            更多的时候我们会从零创建一个新的节点，然后插入到指定位置：
            var
                list = document.getElementById('list'),
                haskell = document.createElement('p');
            haskell.id = 'haskell';
            haskell.innerText = 'Haskell';
            list.appendChild(haskell);
            这样我们就动态添加了一个新的节点：
            <!-- HTML结构 -->
            <div id="list">
                <p id="java">Java</p>
                <p id="python">Python</p>
                <p id="scheme">Scheme</p>
                <p id="haskell">Haskell</p>
            </div>
        
            使用parentElement.insertBefore(newElement, referenceElement);，子节点会插入到referenceElement之前。
            还是以上面的HTML为例，假定我们要把Haskell插入到Python之前：
            <!-- HTML结构 -->
            <div id="list">
                <p id="java">Java</p>
                <p id="python">Python</p>
                <p id="scheme">Scheme</p>
            </div>
            可以这么写：
            var
                list = document.getElementById('list'),
                ref = document.getElementById('python'),
                haskell = document.createElement('p');
            haskell.id = 'haskell';
            haskell.innerText = 'Haskell';
            list.insertBefore(haskell, ref);
            新的HTML结构如下：
            <!-- HTML结构 -->
            <div id="list">
                <p id="java">Java</p>
                <p id="haskell">Haskell</p>
                <p id="python">Python</p>
                <p id="scheme">Scheme</p>
            </div>
            可见，使用insertBefore重点是要拿到一个“参考子节点”的引用。很多时候，需要循环一个父节点的所有子节点，可以通过迭代children属性实现：
            var
                i, c,
                list = document.getElementById('list');
            for (i = 0; i < list.children.length; i++) {
                c = list.children[i]; // 拿到第i个子节点
            }
        
        删除一个DOM节点就比插入要容易得多。
        要删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的removeChild把自己删掉：
        // 拿到待删除节点:
        var self = document.getElementById('to-be-removed');
        // 拿到父节点:
        var parent = self.parentElement;
        // 删除:
        var removed = parent.removeChild(self);
        removed === self; // true
        注意到删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置。
        当你遍历一个父节点的子节点并进行删除操作时，要注意，children属性是一个只读属性，并且它在子节点变化时会实时更新。
        例如，对于如下HTML结构：
        <div id="parent">
            <p>First</p>
            <p>Second</p>
        </div>
        当我们用如下代码删除子节点时：
        var parent = document.getElementById('parent');
        parent.removeChild(parent.children[0]);
        parent.removeChild(parent.children[1]); // <-- 浏览器报错
        浏览器报错：parent.children[1]不是一个有效的节点。原因就在于，当<p>First</p>节点被删除后，parent.children的节点数量已经从2变为了1，索引[1]已经不存在了。
        因此，删除多个节点时，要注意children属性时刻都在变化。
        
        操作表单
        设置值Value
        提交
            方式一是通过<form>元素的submit()方法提交一个表单，例如，响应一个<button>的click事件，在JavaScript代码中提交表单：
            <!-- HTML -->
            <form id="test-form">
                <input type="text" name="test">
                <button type="button" onclick="doSubmitForm()">Submit</button>
            </form>
            <script>
            function doSubmitForm() {
                var form = document.getElementById('test-form');
                // 可以在此修改form的input...
                // 提交form:
                form.submit();
            }
            </script>
            这种方式的缺点是扰乱了浏览器对form的正常提交。浏览器默认点击<button type="submit">时提交表单，或者用户在最后一个输入框按回车键。因此，第二种方式是响应<form>本身的onsubmit事件，在提交form时作修改：
            <!-- HTML -->
            <form id="test-form" onsubmit="return checkForm()">
                <input type="text" name="test">
                <button type="submit">Submit</button>
            </form>
            <script>
            function checkForm() {
                var form = document.getElementById('test-form');
                // 可以在此修改form的input...
                // 继续下一步:
                return true;
            }
            </script>
            注意要return true来告诉浏览器继续提交，如果return false，浏览器将不会继续提交form，这种情况通常对应用户输入有误，提示用户错误信息后终止提交form。
            在检查和修改<input>时，要充分利用<input type="hidden">来传递数据。
            例如，很多登录表单希望用户输入用户名和口令，但是，安全考虑，提交表单时不传输明文口令，而是口令的MD5。普通JavaScript开发人员会直接修改<input>：
            <!-- HTML -->
            <form id="login-form" method="post" onsubmit="return checkForm()">
                <input type="text" id="username" name="username">
                <input type="password" id="password" name="password">
                <button type="submit">Submit</button>
            </form>

            <script>
            function checkForm() {
                var pwd = document.getElementById('password');
                // 把用户输入的明文变为MD5:
                pwd.value = toMD5(pwd.value);
                // 继续下一步:
                return true;
            }
            </script>
            这个做法看上去没啥问题，但用户输入了口令提交时，口令框的显示会突然从几个*变成32个*（因为MD5有32个字符）。
            要想不改变用户的输入，可以利用<input type="hidden">实现：
            <!-- HTML -->
            <form id="login-form" method="post" onsubmit="return checkForm()">
                <input type="text" id="username" name="username">
                <input type="password" id="input-password">
                <input type="hidden" id="md5-password" name="password">
                <button type="submit">Submit</button>
            </form>
            <script>
            function checkForm() {
                var input_pwd = document.getElementById('input-password');
                var md5_pwd = document.getElementById('md5-password');
                // 把用户输入的明文变为MD5:
                md5_pwd.value = toMD5(input_pwd.value);
                // 继续下一步:
                return true;
            }
            </script>
            注意到id为md5-password的<input>标记了name="password"，而用户输入的id为input-password的<input>没有name属性。没有name属性的<input>的数据不会被提交。
            
        操作文件 <input type="file">
20170916
        1.系统架构设计师 第二章数据库系统->物理设计
20170918
        1.数据库事务并发控制
            丢失修改:
                       1.甲售票处（设置为T1 事务）读出某班次的机票剩余数A ，设A=20
                       2.乙售票处（设置为T2 事务）读出同班次的机票剩余数A ，也是20
                       3.甲售票处（T1 事务）卖出一张机票，修改剩余数减一（A← A-1），把A=19 写回数据库中
                       4.乙售票处（T2 事务）也卖出一张机票，修改剩余数减一（A← A-1），把A=19 写回数据库中
            不可重复读：
                       不可重复读是指事务T1 读数据以后，T2执行更新操作，就使T1无法再现原先读取的数据，得到与上一次不同的结果
            读“脏”数据：
                       T1 修改某数据并将其写回数据库，T2 读取同一数据后，T1 由于某种原因被撤消，T1 执行回滚，恢复到原始的数据，T2 就读取到了过程中的一个作废的数据，这个数据就是一种垃圾数据，称之为“脏”数据，也是不正确的
            排它锁 X锁 Exclusive Locks
                排它锁也称为独占锁或写锁。一旦事务T 对数据对象A 加上排它锁（X 锁），则只允许T 读取和修改A ，其他任何事务既不能读取和修改A ，也不能再对A 加任何类型的锁，直到T释放A 上的锁为止。
            共享锁 S锁 Share Locks
                共享锁又称读锁。如果事务T 对数据对象A 加上共享锁（S锁），其他事务只能再对A加S 锁，不能加X 锁，直到事务T 释放A 上的S 锁为止。
            锁协议 Locking Protocol
                (1)一级封锁协议。一级封锁协议是事务T 在修改数据之前必须先对其加X 锁，直到事务结束才释放。使用一级封锁协议可以解决丢失修改问题。
                   在一级封锁协议中，如果仅仅是读数据不对其进行修改，是不需要加锁的，它不能保证可重复读和不读“脏”数据。
                (2)二级封锁协议。二级封锁协议是事务T 对要修改数据必须先加X 锁，直到事务结束才释放X 锁；对要读取的数据必须先加S 锁，读完后即可释放S 锁。
                   二级封锁协议除防止了丢失修改，还可以进一步防止读“脏”数据。但在二级封锁协议中，由于读完数据后即可释放S锁，所以它不能保证可重复读。
                (3)三级封锁协议。三级封锁协议是事务T 在读取数据之前必须先对其加S 锁，在要修改数据之前必须先对其加X 锁，直到事务结束后才释放所有锁。
                   三级封锁协议除防止了丢失修改和不读“脏”数据外，还进一步防止了不可重复读。
                两段锁协议：两段锁协议是指每个事务的执行可以分为两个阶段：生长阶段（加锁阶段）和衰退阶段（解锁阶段）。
                            加锁阶段：在该阶段可以进行加锁操作。在对任何数据进行读操作之前要申请并获得S锁，在进行写操作之前要申请并获得X锁。加锁不成功，则事务进入等待状态，直到加锁成功才继续执行。
                            解锁阶段：当事务释放了一个封锁以后，事务进入解锁阶段，在该阶段只能进行解锁操作不能再进行加锁操作。
                            若并发执行的所有事务均遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的。
                            两段锁协议并不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生死锁。
20170920
        1.系统架构设计师 第三章 计算机网络与数据通信
        2.IP地址分类、子网掩码

        3.osi协议层 & TCP/IP协议族
        应用层　　　　\
        表示层　　　　-　　应用层
        会话层　　　　/　　　　　　　　　　　　
        传输层　　　　-　　传输层
        网络层　　　　-　　网络层
        数据链路层　　-　　数据链路层
        物理层　　　　-　　物理层
        
        POP3 FTP HTTP Telent SMTP  NFS  DHCP TFTP SNMP DNS
                 TCP               &&&         UDP
                          IP ICMP IGMP ARP RARP
                             CSMA/CD TokingRing
        
        4.网络分层与相关设备 http://www.cnblogs.com/ceachy/p/Network_Layers_and_Devices.html?utm_source=tuicool&utm_medium=referral
        网关                        -上三层，处理协议转换
        路由器（三层交换机）        -网络层，传输数据包，分隔冲突域和广播域
        交换机（和网桥）            -数据链路层，传输帧，分割冲突域
        集线器（和中继器）          -物理层，中继和放大电信号
20170921 - 20170926 
        1.系统架构设计师 第八章 系统开发基础知识
        2.Javascript BOM
            Ajax => 网页即时通信/消息推送 http://blog.csdn.net/u010297957/article/details/60878821
            通过检测window对象是否有XMLHttpRequest属性来确定浏览器是否支持标准的XMLHttpRequest。注意，不要根据浏览器的navigator.userAgent来检测浏览器是否支持某个JavaScript特性，一是因为这个字符串本身可以伪造，二是通过IE版本判断JavaScript特性将非常复杂。
            当创建了XMLHttpRequest对象后，要先设置onreadystatechange的回调函数。在回调函数中，通常我们只需通过readyState === 4判断请求是否完成，如果已完成，再根据status === 200判断是否是一个成功的响应。
            XMLHttpRequest对象的open()方法有3个参数，第一个参数指定是GET还是POST，第二个参数指定URL地址，第三个参数指定是否使用异步，默认是true，所以不用写。
            注意，千万不要把第三个参数指定为false，否则浏览器将停止响应，直到AJAX请求完成。如果这个请求耗时10秒，那么10秒内你会发现浏览器处于“假死”状态。
            最后调用send()方法才真正发送请求。GET请求不需要参数，POST请求需要把body部分以字符串或者FormData对象传进去。
                安全限制
                    上面代码的URL使用的是相对路径。如果你把它改为'http://www.sina.com.cn/'，再运行，肯定报错。在Chrome的控制台里，还可以看到错误信息。
                    这是因为浏览器的同源策略导致的。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。
                    完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。
                跨域
                    Flash插件
                    同源域名下架设代理
                    JSONP 返回js 只能GET => 163股票加个查询
                    HTML5->CORS
            Promise 异步回调封装
            Canvas 绘图
20170928
        1.系统架构设计师 第九章 面向对象方法
        2.依赖注入 Dependency injection 控制反转 Inversion of control => 解耦思想 IOC容器 对象分离
20171009
        1.系统架构设计师 第十二章 软件架构设计
        变更控制->项目基线
        风险曝光度 = 风险概率 * 风险造成损失
                