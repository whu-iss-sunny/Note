20190304
    1.Linq编程技术内幕 15章 通过Linq查询关联数据库表
    Linq To DataSet 左外连接 into...from...in +（DefaultIfEmpty（DataTable.NewRow））+ 可空类型
20190306
1.sqlserver 建表脚本选项
    pad_index=off,statistics_norecompute=off,ignore_dup_key=off,all_row_locks=on,allow_page_locks=on
      pad_index
        指定填充索引的内部节点的行数，至少应大于等于两行。PAD_INDEX 选项只有在FILLFACTOR 选项指定后才起作用。
        因为PAD_INDEX 使用与FILLFACTOR 相同的百分比。
        缺省时，SQL Server 确保每个索引页至少有能容纳一条最大索引行数据的空闲空间。
        如果FILLFACTOR 指定的百分比不够容纳一行数据SQL Server 会自动内部更改百分比。
      statistics_norecompute
        指定分布统计不自动更新。需要手动执行不带NORECOMPUTE 子句的UPDATESTATISTICS 命令。
      ignore_dup_key
        此选项控制了当往包含于一个惟一约束中的列中插入重复数据时SQL Server 所作的反应。
        当选择此选项时，SQL Server 返回一个错误信息，跳过此行数据的插入，继续执行下面的插入数据的操作：当没选择此选项时，SQL Server 不仅会返回一个错误信息，还会回滚（Rolls Back）整个INSERT 语句
      all_row_locks
        是否允许行锁
      allow_page_locks
        是否允许页面锁
2.SQLServer日期相关
    a.smalldatetime vs datetime
    smalldatetime的有效时间范围1900/1/1~2079/6/6
    datetime的有效时间范围1753/1/1~9999/12/31
    所以我判断如果该值不用到太远的日期范围，
    就会使用smalldatetime
    更关键的差别，那就是smalldatetime只精准到分，而datetime则可精准到3.33毫秒。
    b.DATEADD (datepart , number , date )  number可以为负数 SELECT DATEADD(DAY,-1,'2019-01-01 12:34:56.789') => 2018-12-31 12:34:56.789 
    c.DATEDIFF (datepart , startdate , enddate ) 
    d.DATEPART ( datepart , date )  YYYYMMDD(int) =>  DATEPART(YEAR, GETDATE()) * 10000 + DATEPART(MONTH, GETDATE()) * 100 + DATEPART(DAY, GETDATE())
3.SQLServer任务计划
    必须开启Agent服务
4.SQLServer分页
    a.row_number 子查询
    b.SQL Server 2012及2012以上版本的OFFSET-FETCH筛选
20190308
    1.decimal 和 numeric 区别 https://blog.csdn.net/kk185800961/article/details/78853515
    decimal 完全和声明的一样精确；numeric  至少和声明的一样精确。在 sql server 中两者使用完全和声明的一样精确。
    但是没有例子，很难明白。事实上，不仅sql server 有这两个类型，其他满足 sql 标准的数据库都有。
    2.sqlserver 小数类型 https://www.cnblogs.com/ljhdo/p/4910699.html
    在SQL Server中，实际上小数数值只有两种数据类型：float 和 decimal，分别是近似数值和精确数值。其他小数类型，都可以使用float和decimal来替代，
    例如，双精度（double precision）数据类型等价于 float(53)，real等价于float(24)，
    numeric是 decimal的同义词，
    应该避免在程序中直接使用 double precision、real和numeric，而是用 float(24) 、float(53)和decimal 代替。   
    float(n)	从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。 参数 n 指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。
20190313
    1.sqlserver 多语句表值函数 在left join中的问题（用子查询解决）
20190325
1.left join的困惑：一旦加上where条件，则显示的结果等于inner join 
    https://www.cnblogs.com/huahua035/p/5718469.html
    https://blog.csdn.net/wqc19920906/article/details/79785424
    https://www.cnblogs.com/lgx5/p/6239498.html
    对于left join：左表字段的删选不能放在on后面 因为左连接在where之前一定会返回左表所有行
                   右表字段的删选不能放在where后面 因为会把为null的值过滤掉（根据需求而定）
20190408
1.sql分组然后组内字符串拼接
    my sql => group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator ‘分隔符’] )  
    sql server => STUFF + FOR XML PATH('')
2.SQL SERVER STUFF函数
    stuff函数用于删除指定长度的字符，并可以在制定的起点处插入另一组字符
　　select STUFF('abcdefg',1,0,'1234')       --结果为'1234abcdefg'
　　select STUFF('abcdefg',1,1,'1234')       --结果为'1234bcdefg'
　　select STUFF('abcdefg',2,1,'1234')       --结果为'a1234cdefg'
　　select STUFF('abcdefg',2,2,'1234')       --结果为'a1234defg'
3.SQL SERVER FOR XML PATH('')     https://www.cnblogs.com/liuchenxing/p/9253897.html
4.应用体协议向后兼容
    a.union套struct
    b.模版元编程
    c.protobuf
20190415
1.lambda表达式调用外部变量的问题
    for(int index = 0; index < 10; index++)
    {
        ThreadPool.QueueUserWorkItem(new WaitCallback((state) =>
        {
            Console.WriteLine(index); //输出 并不是 0，1，2，3，4，5，6，7，8，9二是不规则的
        }));
    }
2.C#foreach语句的闭包
    https://blog.csdn.net/u010639500/article/details/82385959
        编译器将闭包引用的局部变量转换为匿名类型的字段，导致了局部变量分配在堆中。
        闭包在C#2.0 的时候引入了闭包语法，选择将循环变量放在循环体外面，for 和foreach 在这方面处理都是一致的。
        但随着人们在使用过程中的种种不适，微软做出了”一点“让步，在C#5 中对”foreach“做了调整，但对”for“没有做改动
        C#5.0会在while循环的代码中创建一个不同的局部循环变量。
3.gitlab使用http方式提交代码不输入密码 
    https://blog.csdn.net/zhuifeng_tjy163163/article/details/80649367
4.Git 忽略编译后文件
    https://blog.csdn.net/u011583927/article/details/80875281
5.C#函数式编程
    a.函数的引用透明性 
      在数学函数中 y=f(x)y=f(x)，一个输入值有固定的输出值。
      例如，无论计算多少次，sinπ sin?π 的结果总是 0。
      程序设计中的函数却不具备这种稳定的特性，因为函数的执行不仅依赖于输入值，而且会受到全局变量，输入文件，类的成员变量等诸多因素的影响
      函数的返回值只依赖于其输入值，这种特性就称为引用透明性（referential transparency）
    b.高阶函数
      参数或者返回值是其它函数的函数叫做高阶函数
20190419
1.C#扩展方法 类型参数可以是基类型 接口 或者泛型
2.git pull下来的 +-和左边的数字分别代表什么意思 https://segmentfault.com/q/1010000016341640/a-1020000016362929
  代表增加，-代表删除, + - 前面的数字是总共变更的行数. 但一个+或者-代表几行是不固定的. git 会基于当前的可用显示范围来计算出具体的符号个数, 他不能保证每个符号代表的数量固定, 但却可以保证+-符号的比例正确.
  比如 4 +- 说明总共变更了4行, 一个两个符号, +占50%, -占50%. 所以可以得知增加了2行,删除了2行.
  同理 25 ++++- +号占了80%, 总共增加 25 * 0.8 = 20 行, －号占20%, 总共删除了 25 * 0.2 = 5 行.
3.C# 函数式编程 => .net 4.0 vs2010 契约 => PureAttribute (纯函数，副作用，引用透明)
4.sqlserver调用C#.dll https://blog.51cto.com/ultrasql/1593982
20190421
1.sql server profile 使用细节
  https://blog.csdn.net/jdoouddm7i/article/details/62037938
  SQL Server Profiler->列筛选[DataBaseName DataBaseID]
2.Sql server统计查询语句消耗时间 
    https://www.cnblogs.com/wangfuyou/p/5670889.html
    set statistics time on
    go
     xxxx
    go
    set statistics time off
3.工作记录
    a.SELECT * FROM [dbo].[v_agent_ances_simple]  --where AgentID = AgentAncesID = 30114
    b.SELECT t1.id, t1.tree_path, t2.id, t2.tree_path
      FROM [dbo].[pas_agent] t1 INNER JOIN [dbo].[pas_agent] t2 ON t2.tree_path like t1.tree_path + '%'
     --WHERE t1.deleted = 0 AND t2.deleted = 0 AND t1.id = 30114
    上述两个查询作用差不多，一个用了like 一个没用like 在没有where的时候 a的效率远高于b 加了where之后b的高于a 
    a才用了字符串拆分函数而b才用的lik%方法判断字符串，主观上比较排斥b没想到最终b却成了效率高的一种，数据库还是要具体问题具体分析万事不绝对
20190422
1.递归删除某种文件 del /?
     names         指定一个或多个文件或者目录列表。
                   通配符可用来删除多个文件。
                   如果指定了一个目录，该目录中的所
                   有文件都会被删除。

     /P            删除每一个文件之前提示确认。
     /F            强制删除只读文件。
     /S            删除所有子目录中的指定的文件。
     /Q            安静模式。删除全局通配符时，不要求确认
     /A            根据属性选择要删除的文件
20190423
1.druid 
    执行时间分布[ - - - - - - - - ] 分别代表8个耗时区间的次数 
    1毫秒次数、1-10毫秒次数、10-100毫秒次数、100-1000毫秒次数、1-10秒次数、10-100秒次数、100-1000秒次数、大于1000秒次数
20190425
1.sql查询优化
    https://www.cnblogs.com/firstdream/p/5446946.html
    https://www.cnblogs.com/huangxincheng/p/4217551.html
20190426
1.sql exsits
    https://www.cnblogs.com/xuanhai/p/5810918.html
    EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False
    EXISTS 指定一个子查询，检测 行 的存在。
2.any some all 关键字
  https://bbs.csdn.net/topics/370223425
  =any（subquery） <=> in (subquery)
  https://wenku.baidu.com/view/1fad410a79563c1ec5da7112.html
3.exsits in join 效率比较 一般exsits比较高
4.asp.net webpage => 新建网站 Asp.Net 网站(Razor v2/3)
   wp布局 Content Blocks（内容块）@RenderPage()
          Layout Page（布局页）@RenderBody()
   wp防止文件被浏览 在 ASP.NET 中，文件的名称以下划线开头，可以防止这些文件在网上被浏览。
                    如果您不想让您的内容块或者布局页被您的用户看到，可以重命名这些文件：
                    _header.cshtm
                    _footer.cshtml
                    _Layout.cshtml
                    隐藏敏感信息（数据库密码、电子邮件密码等等）最通用的方法是将这些信息保存在一个名为"_AppStart"的单独的文件中
   全局 _AppStart _PageStart
   表单 IsPost Request["input-name"]
   Page对象
   文件 
        Persons.txt
            George,Lucas
            Steven,Spielberg
            Alfred,Hitchcock
        ----------------------------------------------------------
        @{
            var dataFile = Server.MapPath("~/App_Data/Persons.txt");
            Array userData = File.ReadAllLines(dataFile);
        }
    帮助器 http://www.runoob.com/aspnet/webpages-ref-helpers.html
        WebGrid 帮助器
        Chart 帮助器
        WebMail 帮助器
        WebImage 帮助器
        第三方帮助器
            通过 Razor，您可以利用内建的或者第三方的帮助器来简化电子邮件、数据库、多媒体、社交网络以及很多其他问题（如导航和的网络安全）的使用。
20190428
1. .net Xml序列化 xmlserializer 
    https://www.cnblogs.com/mad/p/xmlserializer_filenotfoundexception.html   
2.关于ASP.NET WebForm与ASP.NET MVC的比较
    https://www.cnblogs.com/hgmyz/p/6960903.html
3.web form 事件
    Page_Load 事件 Page.IsPostBack 属性      
        Page_Load 子例程会在页面每次加载时运行。如果您仅希望在页面第一次加载时执行 Page_Load 子例程中的代码，您可以使用 Page.IsPostBack 属性。
        如果 Page.IsPostBack 属性为 false，则页面第一次被载入，如果为 true，则页面传回服务器
4.sql server query running slow from java
    https://stackoverflow.com/questions/961078/sql-server-query-running-slow-from-java
20190429
1. web from 服务器控件
    所有服务器控件必须出现在 <form> 标签内，同时 <form> 标签必须包含 runat="server" 属性
    该表单总是向自身页面进行提交。如果您规定了一个 action 属性，它会被忽略。如果您省略了 method 属性，它将被默认地设置为 method="post"。
    同时，如果您没有规定 name 和 id 属性，它们则由 ASP.NET 自动分配
    一个 .aspx 仅能包含一个 <form runat="server"> 控件
2. web from 对象ViewState
    https://www.cnblogs.com/wwan/archive/2010/11/18/1880357.html